import React, { useState, useRef, useEffect } from 'react';
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { BookEntity } from '@/lib/BookEntity';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { BookOpen, Send, Loader2, MessageCircle, X, Check, AlertCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import { useProfile } from '@/hooks/useProfile';
import { useNavigate } from 'react-router-dom';
import { sendMessage } from '@/lib/MessageService';
import { supabase } from '@/lib/supabase';
import { useVerificationCheck } from '@/lib/verification';

// Predefined messages for quick selection
const predefinedMessages = [
  '‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ, ‡¶¨‡¶á‡¶ü‡¶ø ‡¶ï‡¶ø ‡¶è‡¶ñ‡¶®‡¶ì ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá?',
  '‡¶¨‡¶á‡¶ü‡¶ø‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ï‡ßá‡¶Æ‡¶®?',
  '‡¶¶‡¶æ‡¶Æ‡¶ü‡¶æ ‡¶ï‡¶ø ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶®‡¶æ‡¶ï‡¶ø ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá?'
];

// ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶ø‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶®‡ßç‡¶° ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
const profilePredefinedMessages = [
  '‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶ï‡¶ø ‡¶¨‡¶á ‡¶Ü‡¶õ‡ßá?',
  '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶á',
  '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶õ‡¶ø',
  '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶è‡¶ñ‡¶® ‡¶¨‡¶á ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶®?'
];

interface MessageDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  recipientId: string;
  recipientName: string;
  bookId?: string;
  bookTitle?: string;
  book?: BookEntity | null;
}

const MessageDialog: React.FC<MessageDialogProps> = ({ 
  open, 
  onOpenChange, 
  recipientId, 
  recipientName,
  bookId, 
  bookTitle,
  book 
}) => {
  const { toast } = useToast();
  const { user } = useAuth();
  const { profile } = useProfile();
  const navigate = useNavigate();
  const { checkAndShowWarning, isVerified } = useVerificationCheck();
  
  const [message, setMessage] = useState('');
  const [sending, setSending] = useState(false);
  const [messageSent, setMessageSent] = useState(false);
  const [sellerProfile, setSellerProfile] = useState<any>(null);
  const [checkingInstitution, setCheckingInstitution] = useState(true);
  const [sameInstitution, setSameInstitution] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  
  // State to prevent multiple permission checks
  const [permissionsChecked, setPermissionsChecked] = useState(false);
  const [permissionCheckStarted, setPermissionCheckStarted] = useState(false);
  
  // ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á permission check ‡¶ï‡¶∞‡¶ø ‡¶Ø‡¶ñ‡¶® dialog ‡¶ñ‡ßã‡¶≤‡ßá
  useEffect(() => {
    const checkAllPermissions = async () => {
      // Prevent multiple checks
      if (permissionCheckStarted || permissionsChecked) {
        console.log('Permission check already started or completed, skipping...');
        return;
      }
      
      console.log('=== MessageDialog: Starting permission checks ===');
      console.log('Dialog open:', open);
      console.log('User exists:', !!user);
      console.log('User ID:', user?.id);
      console.log('Recipient ID:', recipientId);
      console.log('User profile exists:', !!profile);
      console.log('User profile institute:', profile?.institute_name);
      
      if (!user || !recipientId || !open) {
        console.log('Missing required data, aborting checks');
        setCheckingInstitution(false);
        return;
      }
      
      // ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶è‡¶ñ‡¶®‡ßã ‡¶≤‡ßã‡¶° ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º‡ßá ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶ø
      if (!profile) {
        console.log('Profile not loaded yet, waiting...');
        setTimeout(() => {
          if (open && user && recipientId && !permissionCheckStarted) {
            checkAllPermissions();
          }
        }, 300);
        return;
      }
      
      try {
        setPermissionCheckStarted(true);
        setCheckingInstitution(true);
        
        // ‡ßß. ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶∏‡ßá‡¶≤‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶á
        console.log('Fetching seller profile...');
        const { data: sellerData, error: sellerError } = await supabase
          .from('profiles')
          .select('institute_name, name, avatar_url')
          .eq('id', recipientId)
          .single();
          
        if (sellerError) {
          console.error('Error fetching seller profile:', sellerError);
          throw sellerError;
        }
        
        console.log('Seller profile:', sellerData);
        setSellerProfile(sellerData);
        
        // ‡ß®. ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø
        console.log('Checking if user is admin...');
        const { data: adminData, error: adminError } = await supabase
          .from('admin_users')
          .select('*')
          .eq('user_id', user.id)
          .single();
          
        // If user is admin, allow access regardless of institution
        if (adminData && !adminError) {
          console.log('üîë User is admin, allowing access');
          setSameInstitution(true);
          setPermissionsChecked(true);
          setCheckingInstitution(false);
          return;
        }
        
        // ‡ß©. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø
        console.log('Checking institution match...');
        console.log('User institute:', `"${profile?.institute_name}"`);
        console.log('Seller institute:', `"${sellerData?.institute_name}"`);
        
        if (profile && sellerData && profile.institute_name && sellerData.institute_name) {
          const userInstitute = profile.institute_name.trim().toLowerCase();
          const sellerInstitute = sellerData.institute_name.trim().toLowerCase();
          
          console.log('Normalized comparison:');
          console.log('User (normalized):', `"${userInstitute}"`);
          console.log('Seller (normalized):', `"${sellerInstitute}"`);
          
          if (userInstitute === sellerInstitute) {
            console.log('‚úÖ Institutions match! Allowing message dialog');
            setSameInstitution(true);
            setPermissionsChecked(true);
            
            // ‡ß™. ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡ßá‡¶ï (mandatory for messaging)
            if (!isVerified) {
              console.log('User not verified, checking verification status from server...');
              const verificationResult = await checkAndShowWarning(user.id, 'message');
              if (!verificationResult) {
                console.log('Verification check failed, closing dialog');
                setSameInstitution(false);
                setPermissionsChecked(true);
                onOpenChange(false);
                return;
              }
            }
          } else {
            console.log('‚ùå Institutions do not match');
            console.log('User:', `"${profile.institute_name.trim()}"`);
            console.log('Seller:', `"${sellerData.institute_name.trim()}"`);
            setSameInstitution(false);
            setPermissionsChecked(true);
            
            // Show toast notification
            toast({
              title: "‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ",
              description: "‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶á ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§",
              variant: "destructive",
            });
            
            // Close the dialog and redirect to not-allowed page
            setTimeout(() => {
              onOpenChange(false);
              navigate('/not-allowed');
            }, 1500); // Give time to read the toast
          }
        } else {
          console.log('‚ùå Missing institute information');
          console.log('Profile institute missing:', !profile?.institute_name);
          console.log('Seller institute missing:', !sellerData?.institute_name);
          setSameInstitution(false);
          setPermissionsChecked(true);
          
          // Show specific error message
          toast({
            title: "‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ö‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£",
            description: "‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶â‡¶≠‡¶Ø‡¶º ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
            variant: "destructive",
          });
          
          // Close the dialog and redirect to not-allowed page
          setTimeout(() => {
            onOpenChange(false);
            navigate('/not-allowed');
          }, 1500);
        }
      } catch (error) {
        console.error('Error in permission checks:', error);
        setSameInstitution(false);
        setPermissionsChecked(true);
        
        toast({
          title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
          description: "‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
          variant: "destructive",
        });
        
        // Close dialog on error
        setTimeout(() => {
          onOpenChange(false);
        }, 1500);
      } finally {
        setCheckingInstitution(false);
        console.log('=== MessageDialog: Permission checks completed ===');
      }
    };
    
    // ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ dialog ‡¶ñ‡ßã‡¶≤‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø
    if (open && user && recipientId && profile && !permissionsChecked && !permissionCheckStarted) {
      checkAllPermissions();
    } else if (open && (!user || !recipientId)) {
      console.log('Missing required data for permission checks');
      setCheckingInstitution(false);
    }
  }, [open, user, recipientId, profile]); // Removed problematic dependencies
  
  // Focus the textarea when dialog opens
  useEffect(() => {
    if (open && textareaRef.current && sameInstitution) {
      setTimeout(() => {
        textareaRef.current?.focus();
      }, 100);
    }
  }, [open, sameInstitution]);
  
  // Reset state when dialog closes
  useEffect(() => {
    if (!open) {
      // Reset all states
      setMessage('');
      setSending(false);
      setMessageSent(false);
      setSameInstitution(false);
      setCheckingInstitution(true);
      setSellerProfile(null);
      // Reset permission check states
      setPermissionsChecked(false);
      setPermissionCheckStarted(false);
      
      console.log('MessageDialog: All states reset on close');
    }
  }, [open]);
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!message.trim() || !user || !sameInstitution) return;
    
    // ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø
    const isAllowed = await checkAndShowWarning(user.id, 'message');
    if (!isAllowed) {
      onOpenChange(false);
      return;
    }
    
    setSending(true);
    
    try {
      // Send message directly
      const { data, error } = await sendMessage(
        user.id,
        recipientId,
        message.trim(),
        bookId
      );
      
      if (error) throw error;
      
      // Show success state
      setMessageSent(true);
      
      // Show toast
      toast({
        title: "‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        description: "‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®",
      });
      
      // Close dialog and redirect after a short delay
      setTimeout(() => {
        setMessage('');
        onOpenChange(false);
        
        // Navigate to messages page with seller and book ID
        // Add the initial message as a URL parameter
        const encodedMessage = encodeURIComponent(message.trim());
        const url = bookId 
          ? `/messages?seller=${recipientId}&bookId=${bookId}&initialMessage=${encodedMessage}`
          : `/messages?seller=${recipientId}&initialMessage=${encodedMessage}`;
          
        navigate(url);
      }, 1000);
      
    } catch (error) {
      console.error('Error sending message:', error);
      toast({
        title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
        description: "‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        variant: "destructive",
      });
      setSending(false);
    }
  };
  
  const handleSelectPredefinedMessage = (predefinedMessage: string) => {
    setMessage(predefinedMessage);
    if (textareaRef.current) {
      textareaRef.current.focus();
    }
  };
  
  const handleViewConversation = () => {
    // Navigate to messages page
    const url = bookId 
      ? `/messages?seller=${recipientId}&bookId=${bookId}`
      : `/messages?seller=${recipientId}`;
      
    navigate(url);
    onOpenChange(false);
  };
  
  // ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶ø‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶®‡ßç‡¶° ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶ø
  const messagesToShow = bookId ? predefinedMessages : profilePredefinedMessages;
  
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md max-w-[95vw] p-3 sm:p-6 bg-background/95 backdrop-blur-sm border border-border shadow-lg overflow-hidden">
        <DialogHeader className="space-y-1 sm:space-y-2">
          <DialogTitle className="text-base sm:text-xl font-semibold flex items-center gap-2">
            <MessageCircle className="h-4 w-4 sm:h-5 sm:w-5 text-primary" />
            <span className="truncate">
              {sellerProfile?.name || recipientName || '‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ'}-‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡¶ø‡¶®
            </span>
          </DialogTitle>
          <DialogDescription className="text-xs sm:text-sm">
            {bookId ? '‡¶¨‡¶á‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßç‡¶∞‡¶π ‡¶ú‡¶æ‡¶®‡¶æ‡¶®' : '‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®'}
          </DialogDescription>
        </DialogHeader>
        
        {book && bookTitle && (
        <div className="p-3 bg-muted/30 rounded-lg border border-border">
          <p className="font-medium text-foreground text-sm sm:text-base truncate">
              ‡¶¨‡¶á: {bookTitle || book.title}
          </p>
            {book && (
              <>
          <p className="text-xs sm:text-sm text-muted-foreground mt-1 truncate">
            ‡¶≤‡ßá‡¶ñ‡¶ï: {book.author}
          </p>
          <p className="text-base sm:text-lg font-bold text-primary mt-2">
            ‡ß≥{book.price}
          </p>
              </>
            )}
        </div>
        )}
        
        {checkingInstitution ? (
          <div className="flex items-center justify-center py-6">
            <Loader2 className="h-6 w-6 animate-spin text-primary" />
            <p className="ml-3 text-sm">‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...</p>
          </div>
        ) : !user ? (
          <div className="bg-amber-50 border border-amber-200 rounded-lg p-3 my-2 sm:my-4">
            <div className="flex items-start">
              <AlertCircle className="h-5 w-5 text-amber-500 mt-0.5 mr-2 flex-shrink-0" />
              <div>
                <h3 className="font-medium text-amber-800 text-sm sm:text-base">‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®</h3>
                <p className="text-xs sm:text-sm text-amber-700 mt-1">
                  ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶Ü‡¶ó‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                </p>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="mt-3 bg-amber-100 border-amber-200 text-amber-800 hover:bg-amber-200 h-8 text-xs sm:text-sm"
                  onClick={() => {
                    onOpenChange(false);
                    navigate('/login');
                  }}
                >
                  ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
              </div>
            </div>
          </div>
        ) : !sameInstitution ? (
          <div className="bg-red-50 border border-red-200 rounded-lg p-3 my-2 sm:my-4">
            <div className="flex items-start">
              <AlertCircle className="h-5 w-5 text-red-500 mt-0.5 mr-2 flex-shrink-0" />
              <div className="flex-1 overflow-hidden">
                <h3 className="font-medium text-red-800 text-sm sm:text-base">‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á</h3>
                <p className="text-xs sm:text-sm text-red-700 mt-1">
                  ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶á ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞‡¶æ ‡¶è‡¶ï‡ßá ‡¶Ö‡¶™‡¶∞‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§
                </p>
                <div className="mt-2 text-xs sm:text-sm">
                  <p className="truncate"><span className="font-medium">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®:</span> {profile?.institute_name || '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ'}</p>
                  <p className="truncate"><span className="font-medium">‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®:</span> {sellerProfile?.institute_name || '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ'}</p>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <form onSubmit={handleSubmit} className="space-y-3 mt-3">
            {/* Predefined messages */}
            <div className="flex flex-col gap-2 max-h-32 overflow-y-auto pb-1">
              {messagesToShow.map((msg, index) => (
                <Button
                  key={index}
                  type="button"
                  variant="outline"
                  size="sm"
                  className="text-xs py-2 px-3 h-auto min-h-[32px] whitespace-normal text-left justify-start"
                  onClick={() => handleSelectPredefinedMessage(msg)}
                  disabled={sending || messageSent}
                >
                  {msg}
                </Button>
              ))}
            </div>
            
            <div>
              <Textarea
                ref={textareaRef}
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
                className="min-h-20 sm:min-h-24 text-sm resize-none focus:ring-1 focus:ring-primary"
                disabled={sending || messageSent}
              />
            </div>
            
            <DialogFooter className="flex flex-col sm:flex-row items-stretch sm:items-center gap-2 pt-2">
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={handleViewConversation}
                className="text-xs h-9 order-1 sm:order-none"
              >
                ‡¶∏‡¶¨ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
              </Button>
              
              <div className="flex gap-2 order-0 sm:order-none">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => onOpenChange(false)}
                  className="glass-button border border-border h-9 text-xs flex-1 sm:flex-none"
                  disabled={sending}
                >
                  <X className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                  ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
                </Button>
                
                <Button
                  type="submit"
                  className="primary-button gap-1 sm:gap-2 h-9 text-xs flex-1 sm:flex-none"
                  disabled={!message.trim() || sending || messageSent}
                >
                  {sending ? (
                    <>
                      <Loader2 className="h-3 w-3 sm:h-4 sm:w-4 animate-spin" />
                      ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...
                    </>
                  ) : messageSent ? (
                    <>
                      <Check className="h-3 w-3 sm:h-4 sm:w-4" />
                      ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
                    </>
                  ) : (
                    <>
                      <Send className="h-3 w-3 sm:h-4 sm:w-4" />
                      ‡¶™‡¶æ‡¶†‡¶æ‡¶®
                    </>
                  )}
                </Button>
              </div>
            </DialogFooter>
          </form>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default MessageDialog; 