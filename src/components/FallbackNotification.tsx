import React, { useEffect, useState } from 'react';
import { toast } from '@/components/ui/use-toast';
import { checkNotificationEnvironment, getNotificationErrorMessage } from '@/lib/notificationUtils';
import { isSafariBrowser, getSafariNotificationInfo } from '@/lib/safariNotificationFix';

interface FallbackNotificationProps {
  show?: boolean;
  onClose?: () => void;
}

/**
 * FallbackNotification Component
 * ржпрзЗ рж╕ржХрж▓ ржбрж┐ржнрж╛ржЗрж╕рзЗ Web Notifications API рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗ ржирж╛
 * рждрж╛ржжрзЗрж░ ржЬржирзНржп ржмрж┐ржХрж▓рзНржк ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕рж┐рж╕рзНржЯрзЗржо
 */
const FallbackNotification: React.FC<FallbackNotificationProps> = ({ show = true, onClose }) => {
  const [hasShownWarning, setHasShownWarning] = useState(false);

  useEffect(() => {
    if (!show || hasShownWarning) return;

    const checkAndShowNotification = () => {
      const environment = checkNotificationEnvironment();
      const safari = isSafariBrowser();
      const safariInfo = safari ? getSafariNotificationInfo() : null;
      
      // Safari-specific handling
      if (safari && safariInfo && !safariInfo.notificationSupported) {
        const safariMessage = safariInfo.issues.length > 0 
          ? `Safari рж╕ржорж╕рзНржпрж╛: ${safariInfo.issues[0]}` 
          : "Safari ржП ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ ржирзЗржЗ";
          
        const safariSuggestion = safariInfo.suggestions.length > 0
          ? safariInfo.suggestions[0]
          : "Safari ржПрж░ ржирждрзБржи version ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи";
      
        toast({
          title: "ЁЯНО Safari ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕ржорж╕рзНржпрж╛",
          description: `${safariMessage}ред ${safariSuggestion}ред ржПржЦржирзЗрж░ ржорждрзЛ manual refresh ржХрж░рзБржиред`,
          duration: 8000,
        });
        
        setHasShownWarning(true);
        onClose?.();
        return;
      }
      
      // ржпржжрж┐ notification рж╕рж╛ржкрзЛрж░рзНржЯ ржирж╛ ржХрж░рзЗ (non-Safari browsers)
      if (!environment.supported) {
        const browserName = safari ? 'Safari' : 'ржПржЗ ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ';
        toast({
          title: "ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ ржирзЗржЗ",
          description: `${browserName} ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ ржирзЗржЗред ржирждрзБржи ржорзЗрж╕рзЗржЬрзЗрж░ ржЬржирзНржп ржкрзЗржЬ рж░рж┐ржлрзНрж░рзЗрж╢ ржХрж░рзБржиред`,
          duration: 5000,
        });
        
        setHasShownWarning(true);
        onClose?.();
        return;
      }

      // ржпржжрж┐ permission ржжрзЗржУржпрж╝рж╛ ржирж╛ рж╣ржпрж╝
      if (environment.permission === 'denied') {
        toast({
          title: "ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржмржирзНржз ржЖржЫрзЗ",
          description: "ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржЪрж╛рж▓рзБ ржХрж░рждрзЗ ржмрзНрж░рж╛ржЙржЬрж╛рж░ рж╕рзЗржЯрж┐ржВрж╕рзЗ ржЧрж┐ржпрж╝рзЗ ржЕржирзБржорждрж┐ ржжрж┐ржиред",
          duration: 6000,
        });
        
        setHasShownWarning(true);
        onClose?.();
        return;
      }

      // ржпржжрж┐ HTTPS ржирж╛ рж╣ржпрж╝
      if (!environment.secure) {
        toast({
          title: "ржирж┐рж░рж╛ржкржж рж╕ржВржпрзЛржЧ ржкрзНрж░ржпрж╝рзЛржЬржи",
          description: "ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржирзЗрж░ ржЬржирзНржп HTTPS рж╕ржВржпрзЛржЧ ржкрзНрж░ржпрж╝рзЛржЬржиред",
          duration: 5000,
        });
        
        setHasShownWarning(true);
        onClose?.();
        return;
      }

      // ржпржжрж┐ рж╕ржм ржарж┐ржХ ржерж╛ржХрзЗ
      if (environment.supported && environment.permission === 'granted' && environment.secure) {
        console.log('тЬЕ Notification environment is optimal');
        setHasShownWarning(true);
        onClose?.();
      }
    };

    // ржПржХржЯрзБ ржжрзЗрж░рж┐ ржХрж░рзЗ ржЪрзЗржХ ржХрж░рж┐ ржпрж╛рждрзЗ ржкрзЗржЬ рж▓рзЛржб рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝
    const timer = setTimeout(checkAndShowNotification, 2000);
    
    return () => clearTimeout(timer);
  }, [show, hasShownWarning, onClose]);

  // ржПржЗ component ржХрзЛржирзЛ UI render ржХрж░рзЗ ржирж╛, рж╢рзБржзрзБ side effect ржЪрж╛рж▓рж╛ржпрж╝
  return null;
};

export default FallbackNotification;
