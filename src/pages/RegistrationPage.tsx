import { useState } from "react"
import { useNavigate, Link } from "react-router-dom"
import { useAuth } from "@/contexts/AuthContext"
import { supabase } from "@/lib/supabase"
import { useToast } from "@/components/ui/use-toast"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { 
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue
} from "@/components/ui/select"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Eye, EyeOff, Play } from "lucide-react"

export default function RegistrationPage() {
  const [formData, setFormData] = useState({
    name: "",
    rollNumber: "",
    semester: "",
    department: "",
    instituteName: "",
  })
  const [loading, setLoading] = useState(false)
  const [isVideoDialogOpen, setIsVideoDialogOpen] = useState(false)
  const navigate = useNavigate()
  const { toast } = useToast()
  const { user } = useAuth()

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value })
  }

  const handleSelectChange = (name: string, value: string) => {
    setFormData({ ...formData, [name]: value })
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)

    // Check if user is authenticated via Google
    if (!user) {
      toast({
        title: "рждрзНрж░рзБржЯрж┐",
        description: "ржЖржкржирж╛ржХрзЗ ржкрзНрж░ржержорзЗ Google ржжрж┐ржпрж╝рзЗ рж▓ржЧржЗржи ржХрж░рждрзЗ рж╣ржмрзЗред",
        variant: "destructive",
      })
      navigate('/login')
      setLoading(false)
      return
    }

    try {
      console.log("ЁЯЪА ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржЖржкржбрзЗржЯ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ")
      console.log("ЁЯСд User Info:", { 
        id: user.id, 
        email: user.email,
        app_metadata: user.app_metadata,
        user_metadata: user.user_metadata 
      })
      console.log("ЁЯУЭ Form Data:", formData)
      
      // First check if profile already exists
      const { data: existingProfile, error: checkError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single()
      
      if (checkError && checkError.code !== 'PGRST116') {
        console.error('тЭМ Error checking existing profile:', checkError)
        throw new Error(`Profile check failed: ${checkError.message}`)
      }
      
      console.log("ЁЯФН Existing profile:", existingProfile)
      
      const userData = {
        id: user.id,
        name: formData.name,
        // email field removed - it's handled by Supabase auth
        roll_number: formData.rollNumber,
        semester: formData.semester,
        department: formData.department,
        institute_name: formData.instituteName,
        created_at: existingProfile?.created_at || new Date().toISOString(),
        updated_at: new Date().toISOString()
      }

      console.log("ЁЯТ╛ Profile data to save:", userData);

      // Insert or update the user's profile in the database using upsert
      const { data, error } = await supabase
        .from('profiles')
        .upsert(userData, { 
          onConflict: 'id',
          ignoreDuplicates: false 
        })
        .select()
        .single()
      
      if (error) {
        console.error('тЭМ Profile upsert error:', {
          error,
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        })
        throw error
      }

      console.log("тЬЕ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕рзЗржн рж╣ржпрж╝рзЗржЫрзЗ:", data);

      // Success message
      toast({
        title: "рж╕ржлрж▓",
        description: "ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржорзНржкрзВрж░рзНржг рж╣ржпрж╝рзЗржЫрзЗред",
      })
      
      // Redirect to home page
      navigate("/")
      
    } catch (error: any) {
      console.error("ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржЖржкржбрзЗржЯ рждрзНрж░рзБржЯрж┐:", error)
      toast({
        title: "рждрзНрж░рзБржЯрж┐",
        description: error.message || "ржкрзНрж░рзЛржлрж╛ржЗрж▓ ржЖржкржбрзЗржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  // ржкрзНрж░рждрж┐рж╖рзНржарж╛ржи, рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░, ржмрж┐ржнрж╛ржЧ ржбрзНрж░ржкржбрж╛ржЙржирзЗрж░ ржЬржирзНржп ржбрж╛ржЯрж╛ - SellBookPage ржерзЗржХрзЗ
  const institutions = [
    { value: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ ржЕржл ржЧрзНрж▓рж╛рж╕ ржПржирзНржб рж╕рзЗрж░рж╛ржорж┐ржХрж╕', label: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ ржЕржл ржЧрзНрж▓рж╛рж╕ ржПржирзНржб рж╕рзЗрж░рж╛ржорж┐ржХрж╕' },
    { value: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рж╛рж░рзНржнрзЗ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рж╛рж░рзНржнрзЗ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рзБржЗржбрзЗржи ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рзБржЗржбрзЗржи ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржмржЧрзБржбрж╝рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржмржЧрзБржбрж╝рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржмрж░ржЧрзБржирж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржмрж░ржЧрзБржирж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржмрж░рж┐рж╢рж╛рж▓ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржмрж░рж┐рж╢рж╛рж▓ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржмрзНрж░рж╛рж╣рзНржоржгржмрж╛ржбрж╝рж┐ржпрж╝рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржмрзНрж░рж╛рж╣рзНржоржгржмрж╛ржбрж╝рж┐ржпрж╝рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржЪржЯрзНржЯржЧрзНрж░рж╛ржо ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржЪржЯрзНржЯржЧрзНрж░рж╛ржо ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржЪржЯрзНржЯржЧрзНрж░рж╛ржо ржорж╣рж┐рж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржЪржЯрзНржЯржЧрзНрж░рж╛ржо ржорж╣рж┐рж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржЪрж╛ржБржжржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржЪрж╛ржБржжржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржЪрж╛ржБржкрж╛ржЗржиржмрж╛ржмржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржЪрж╛ржБржкрж╛ржЗржиржмрж╛ржмржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржжрж┐ржирж╛ржЬржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржжрж┐ржирж╛ржЬржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржврж╛ржХрж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржврж╛ржХрж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржврж╛ржХрж╛ ржорж╣рж┐рж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржврж╛ржХрж╛ ржорж╣рж┐рж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржлрж░рж┐ржжржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржлрж░рж┐ржжржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржлрзЗржирзА ржХржорзНржкрж┐ржЙржЯрж╛рж░ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржлрзЗржирзА ржХржорзНржкрж┐ржЙржЯрж╛рж░ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржлрзЗржирзА ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржлрзЗржирзА ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржЧрзЛржкрж╛рж▓ржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржЧрзЛржкрж╛рж▓ржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржЧрзНрж░рж╛ржлрж┐ржХ ржЖрж░рзНржЯрж╕ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ (ржврж╛ржХрж╛)', label: 'ржЧрзНрж░рж╛ржлрж┐ржХ ржЖрж░рзНржЯрж╕ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ (ржврж╛ржХрж╛)' },
    { value: 'рж╣ржмрж┐ржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'рж╣ржмрж┐ржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржпрж╢рзЛрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржпрж╢рзЛрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржЭрж┐ржирж╛ржЗржжрж╣ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржЭрж┐ржирж╛ржЗржжрж╣ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржЦрзБрж▓ржирж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржЦрзБрж▓ржирж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржЦрзБрж▓ржирж╛ ржорж╣рж┐рж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржЦрзБрж▓ржирж╛ ржорж╣рж┐рж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржХрж┐рж╢рзЛрж░ржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржХрж┐рж╢рзЛрж░ржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржХржХрзНрж╕ржмрж╛ржЬрж╛рж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржХржХрзНрж╕ржмрж╛ржЬрж╛рж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржХрзБржбрж╝рж┐ржЧрзНрж░рж╛ржо ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржХрзБржбрж╝рж┐ржЧрзНрж░рж╛ржо ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржХрзБржорж┐рж▓рзНрж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржХрзБржорж┐рж▓рзНрж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржХрзБрж╖рзНржЯрж┐ржпрж╝рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржХрзБрж╖рзНржЯрж┐ржпрж╝рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'рж▓ржХрзНрж╖рзНржорзАржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'рж▓ржХрзНрж╖рзНржорзАржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржорж╛ржЧрзБрж░рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржорж╛ржЧрзБрж░рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржорзМрж▓ржнрзАржмрж╛ржЬрж╛рж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржорзМрж▓ржнрзАржмрж╛ржЬрж╛рж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржоржпрж╝ржоржирж╕рж┐ржВрж╣ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржоржпрж╝ржоржирж╕рж┐ржВрж╣ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржорзБржирзНрж╕рж┐ржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржорзБржирзНрж╕рж┐ржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржиржУржЧрж╛ржБ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржиржУржЧрж╛ржБ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржирж░рж╕рж┐ржВржжрзА ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржирж░рж╕рж┐ржВржжрзА ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржкрж╛ржмржирж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржкрж╛ржмржирж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржкржЯрзБржпрж╝рж╛ржЦрж╛рж▓рзА ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржкржЯрзБржпрж╝рж╛ржЦрж╛рж▓рзА ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'рж░рж╛ржЬрж╢рж╛рж╣рзА ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'рж░рж╛ржЬрж╢рж╛рж╣рзА ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'рж░рж╛ржЬрж╢рж╛рж╣рзА ржорж╣рж┐рж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'рж░рж╛ржЬрж╢рж╛рж╣рзА ржорж╣рж┐рж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'рж░ржВржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'рж░ржВржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'рж╕рж╛рждржХрзНрж╖рзАрж░рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'рж╕рж╛рждржХрзНрж╖рзАрж░рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'рж╢рж░рзАржпрж╝рждржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'рж╢рж░рзАржпрж╝рждржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'рж╢рзЗрж░ржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'рж╢рзЗрж░ржкрзБрж░ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'рж╕рж┐рж░рж╛ржЬржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'рж╕рж┐рж░рж╛ржЬржЧржЮрзНржЬ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'рж╕рж┐рж▓рзЗржЯ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'рж╕рж┐рж▓рзЗржЯ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржЯрж╛ржЩрзНржЧрж╛ржЗрж▓ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржЯрж╛ржЩрзНржЧрж╛ржЗрж▓ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржарж╛ржХрзБрж░ржЧрж╛ржБржУ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржарж╛ржХрзБрж░ржЧрж╛ржБржУ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' },
    { value: 'ржнрзЛрж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ', label: 'ржнрзЛрж▓рж╛ ржкрж▓рж┐ржЯрзЗржХржирж┐ржХ ржЗржирж╕рзНржЯрж┐ржЯрж┐ржЙржЯ' }
  ];

  const departments = [
    { value: 'ржХржорзНржкрж┐ржЙржЯрж╛рж░ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржХржорзНржкрж┐ржЙржЯрж╛рж░ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'рж╕рж┐ржнрж┐рж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'рж╕рж┐ржнрж┐рж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржЗрж▓рзЗржХржЯрзНрж░рж┐ржХрзНржпрж╛рж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржЗрж▓рзЗржХржЯрзНрж░рж┐ржХрзНржпрж╛рж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржорзЗржХрж╛ржирж┐ржХрзНржпрж╛рж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржорзЗржХрж╛ржирж┐ржХрзНржпрж╛рж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржЗрж▓рзЗржХржЯрзНрж░ржирж┐ржХрзНрж╕ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржЗрж▓рзЗржХржЯрзНрж░ржирж┐ржХрзНрж╕ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржкрж╛ржУржпрж╝рж╛рж░ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржкрж╛ржУржпрж╝рж╛рж░ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржорзЗржХрж╛ржЯрзНрж░ржирж┐ржХрзНрж╕ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржорзЗржХрж╛ржЯрзНрж░ржирж┐ржХрзНрж╕ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'рж░рзЗржлрзНрж░рж┐ржЬрж╛рж░рзЗрж╢ржи ржЕрзНржпрж╛ржирзНржб ржПржпрж╝рж╛рж░ ржХржирзНржбрж┐рж╢ржирж┐ржВ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'рж░рзЗржлрзНрж░рж┐ржЬрж╛рж░рзЗрж╢ржи ржЕрзНржпрж╛ржирзНржб ржПржпрж╝рж╛рж░ ржХржирзНржбрж┐рж╢ржирж┐ржВ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржЕржЯрзЛржорзЛржмрж╛ржЗрж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржЕржЯрзЛржорзЛржмрж╛ржЗрж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржЯрзЗржХрзНрж╕ржЯрж╛ржЗрж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржЯрзЗржХрзНрж╕ржЯрж╛ржЗрж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'рж╢рж┐ржкржмрж┐рж▓рзНржбрж┐ржВ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'рж╢рж┐ржкржмрж┐рж▓рзНржбрж┐ржВ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржорзЗрж░рж┐ржи ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржорзЗрж░рж┐ржи ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржлрзБржб ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржлрзБржб ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржЖрж░рзНржХрж┐ржЯрзЗржХржЪрж╛рж░', label: 'ржЖрж░рзНржХрж┐ржЯрзЗржХржЪрж╛рж░' },
    { value: 'ржХрзЗржорж┐ржХрзНржпрж╛рж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржХрзЗржорж┐ржХрзНржпрж╛рж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржмрж╛ржпрж╝рзЛржорзЗржбрж┐ржХрзЗрж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржмрж╛ржпрж╝рзЛржорзЗржбрж┐ржХрзЗрж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯрж╛рж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯрж╛рж▓ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржорж╛ржЗржирж┐ржВ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржорж╛ржЗржирж┐ржВ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржирж┐ржЙржХрзНрж▓рж┐ржпрж╝рж╛рж░ ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржирж┐ржЙржХрзНрж▓рж┐ржпрж╝рж╛рж░ ржЯрзЗржХржирзЛрж▓ржЬрж┐' },
    { value: 'ржкрзЗржЯрзНрж░рзЛрж▓рж┐ржпрж╝рж╛ржо ржЯрзЗржХржирзЛрж▓ржЬрж┐', label: 'ржкрзЗржЯрзНрж░рзЛрж▓рж┐ржпрж╝рж╛ржо ржЯрзЗржХржирзЛрж▓ржЬрж┐' }
  ];

  const semesters = [
    { value: 'рззржо рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░', label: 'рззржо рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░' },
    { value: 'рзиржпрж╝ рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░', label: 'рзиржпрж╝ рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░' },
    { value: 'рзйржпрж╝ рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░', label: 'рзйржпрж╝ рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░' },
    { value: 'рзкрж░рзНрже рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░', label: 'рзкрж░рзНрже рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░' },
    { value: 'рзлржо рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░', label: 'рзлржо рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░' },
    { value: 'рзмрж╖рзНржа рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░', label: 'рзмрж╖рзНржа рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░' },
    { value: 'рзнржо рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░', label: 'рзнржо рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░' },
    { value: 'рзоржо рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░', label: 'рзоржо рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░' }
  ];

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-blue-50 to-white px-4 py-8">
      <Card className="w-full max-w-md shadow-lg border-0">
        <CardHeader className="space-y-1 text-center bg-gradient-to-r from-blue-600 to-indigo-700 text-white rounded-t-lg">
          <CardTitle className="text-2xl font-bold">ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзБржи</CardTitle>
          <CardDescription className="text-blue-100 mb-4">
            ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рждржерзНржп ржкрзВрж░ржг ржХрж░рзЗ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзБржи
          </CardDescription>
          
          {/* Video Guide Button */}
         
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4 pt-6">
            {/* User info section */}
            {user && (
              <div className="bg-blue-50 p-3 rounded-lg border border-blue-200 mb-4">
                <p className="text-sm text-blue-800">
                  <strong>ржЖржкржирж╛рж░ ржЗржорзЗржЗрж▓:</strong> {user.email}
                </p>
                <p className="text-xs text-blue-600 mt-1">
                  Google ржжрж┐ржпрж╝рзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ рж▓ржЧржЗржи рж╣ржпрж╝рзЗржЫрзЗред ржПржЦржи ржкрзНрж░рзЛржлрж╛ржЗрж▓ рждржерзНржп ржкрзВрж░ржг ржХрж░рзБржиред
                </p>
              </div>
            )}
            <div className="space-y-2">
              <Label htmlFor="name">ржкрзВрж░рзНржг ржирж╛ржо</Label>
              <Input
                id="name"
                name="name"
                type="text"
                placeholder="ржЖржкржирж╛рж░ ржкрзВрж░рзНржг ржирж╛ржо"
                value={formData.name}
                onChange={handleChange}
                required
                className="focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="rollNumber">рж░рзЛрж▓ ржиржорзНржмрж░</Label>
              <Input
                id="rollNumber"
                name="rollNumber"
                type="text"
                placeholder="ржЖржкржирж╛рж░ рж░рзЛрж▓ ржиржорзНржмрж░"
                value={formData.rollNumber}
                onChange={handleChange}
                required
                className="focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="semester">рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░</Label>
              <Select
                value={formData.semester}
                onValueChange={(value) => handleSelectChange("semester", value)}
              >
                <SelectTrigger className="w-full focus:ring-2 focus:ring-blue-500">
                  <SelectValue placeholder="рж╕рзЗржорж┐рж╕рзНржЯрж╛рж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи" />
                </SelectTrigger>
                <SelectContent className="max-h-[300px] overflow-y-auto">
                  <SelectGroup>
                    {semesters.map((semester) => (
                      <SelectItem key={semester.value} value={semester.value}>
                        {semester.label}
                      </SelectItem>
                    ))}
                  </SelectGroup>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="department">ржмрж┐ржнрж╛ржЧ</Label>
              <Select
                value={formData.department}
                onValueChange={(value) => handleSelectChange("department", value)}
              >
                <SelectTrigger className="w-full focus:ring-2 focus:ring-blue-500">
                  <SelectValue placeholder="ржмрж┐ржнрж╛ржЧ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи" />
                </SelectTrigger>
                <SelectContent className="max-h-[300px] overflow-y-auto">
                  <SelectGroup>
                    {departments.map((department) => (
                      <SelectItem key={department.value} value={department.value}>
                        {department.label}
                      </SelectItem>
                    ))}
                  </SelectGroup>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="instituteName">ржкрзНрж░рждрж┐рж╖рзНржарж╛ржирзЗрж░ ржирж╛ржо</Label>
              <Select
                value={formData.instituteName}
                onValueChange={(value) => handleSelectChange("instituteName", value)}
              >
                <SelectTrigger className="w-full focus:ring-2 focus:ring-blue-500">
                  <SelectValue placeholder="ржкрзНрж░рждрж┐рж╖рзНржарж╛ржирзЗрж░ ржирж╛ржо ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи" />
                </SelectTrigger>
                <SelectContent className="max-h-[300px] overflow-y-auto">
                  <SelectGroup>
                    {institutions.map((institution) => (
                      <SelectItem key={institution.value} value={institution.value}>
                        {institution.label}
                      </SelectItem>
                    ))}
                  </SelectGroup>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex flex-col space-y-4">
            <Button 
              type="submit" 
              className="w-full bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white shadow-md" 
              disabled={loading}
            >
              {loading ? "ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╣ржЪрзНржЫрзЗ..." : "ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзБржи"}
            </Button>
            <div className="text-sm text-center text-gray-600 space-y-2">
              <p>
                ржЗрждрж┐ржоржзрзНржпрзЗ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЖржЫрзЗ?{" "}
                <Link to="/login" className="text-blue-600 font-medium hover:underline">
                  рж▓ржЧржЗржи ржХрж░рзБржи
                </Link>
              </p>
              <p className="text-gray-500">
                рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗ?{" "}
                <a href="https://www.facebook.com/diplomabazar/" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                  рж╕рж╛рж╣рж╛ржпрзНржп ржирж┐ржи
                </a>
              </p>
            </div>
          </CardFooter>
        </form>
      </Card>
      
      {/* Video Dialog */}
      <Dialog open={isVideoDialogOpen} onOpenChange={setIsVideoDialogOpen}>
        <DialogContent className="max-w-3xl w-full p-4 sm:p-6">
          <DialogHeader>
            <DialogTitle className="text-lg sm:text-xl font-bold text-slate-800">ржХрж┐ржнрж╛ржмрзЗ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЦрзБрж▓ржмрзЗржи - ржнрж┐ржбрж┐ржУ ржЧрж╛ржЗржб</DialogTitle>
          </DialogHeader>
          <div className="relative pb-[56.25%] h-0 mt-4 rounded-lg overflow-hidden shadow-xl border border-slate-200">
            <iframe
              className="absolute top-0 left-0 w-full h-full"
              src="https://www.youtube.com/embed/TnFQT6uj6iU?si=CqQvhPgB7hxp0OzE"
              title="YouTube video player"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              referrerPolicy="strict-origin-when-cross-origin"
              allowFullScreen
            />
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}
