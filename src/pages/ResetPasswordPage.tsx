import { useState, useEffect } from "react"
import { useNavigate, useSearchParams } from "react-router-dom"
import { supabase } from "@/lib/supabase"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useToast } from "@/components/ui/use-toast"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Eye, EyeOff, Lock, Shield, AlertTriangle, Clock, RefreshCw, Mail, Loader2, CheckCircle } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { useAuthUrlParams } from "@/lib/urlParams"

export default function ResetPasswordPage() {
  const navigate = useNavigate()
  const { toast } = useToast()
  const [searchParams] = useSearchParams()
  const [loading, setLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [isValidSession, setIsValidSession] = useState(false)
  const [sessionChecked, setSessionChecked] = useState(false)
  const [newLinkLoading, setNewLinkLoading] = useState(false)
  const [newLinkEmail, setNewLinkEmail] = useState("")
  const [showNewLinkSuccess, setShowNewLinkSuccess] = useState(false)
  const [rateLimitInfo, setRateLimitInfo] = useState<{remaining: number, resetTime: string} | null>(null)
  const [formData, setFormData] = useState({
    password: "",
    confirmPassword: "",
  })
  
  // Parse URL parameters using the new utility
  const urlParams = useAuthUrlParams()
  const { params, hasError, isOtpExpired, isValidAuthFlow, errorMessage, debugInfo } = urlParams

  // Check if the reset session is valid
  useEffect(() => {
    // Prevent multiple rapid executions
    let isExecuting = false
    
    const checkResetSession = async () => {
      if (isExecuting) return
      isExecuting = true
      
      try {
        // Log comprehensive URL parameter analysis
        console.log('üîç Reset Password URL Analysis:', {
          hasError,
          isOtpExpired,
          isValidAuthFlow,
          errorMessage,
          parametersFound: Object.keys(params).length
        })
        
        // Handle OTP expiration error specifically
        if (isOtpExpired) {
          console.log('‚è∞ OTP Expired - showing specific error message')
          toast({
            title: "OTP ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑",
            description: "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            variant: "destructive",
          })
          setSessionChecked(true)
          return
        }
        
        // Handle other errors
        if (hasError && !isOtpExpired) {
          console.log('üö® Authentication Error:', { 
            error: params.error,
            error_code: params.error_code,
            error_description: params.error_description 
          })
          throw new Error(errorMessage || 'Authentication error occurred')
        }
        
        // Extract tokens using the utility
        const { accessToken, refreshToken, token, type } = urlParams.extractTokens()
        
        console.log('üé´ Extracted tokens for password reset:', { 
          hasAccessToken: !!accessToken, 
          hasRefreshToken: !!refreshToken, 
          hasToken: !!token, 
          type 
        })
        
      // Method 1: Check if there's an access token and refresh token in URL (new format)
        if (type === 'recovery' && accessToken && refreshToken) {
          console.log('üîÑ Method 1: Using access_token and refresh_token for session')
          // Set the session using the tokens
          const { data, error } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken,
          })

          if (error) {
            console.error('‚ùå Error setting session with tokens:', error)
            // Don't throw error immediately, try other methods
            console.log('‚ö†Ô∏è Token session failed, trying other methods...')
          } else if (data.session) {
            console.log('‚úÖ Session established successfully with tokens')
            setIsValidSession(true)
            toast({
              title: "‡¶∏‡ßá‡¶∂‡¶® ‡¶¨‡ßà‡¶ß",
              description: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
            })
            return
          }
        }
        
        // Method 2: Check if there's a token parameter (PKCE format)
        if (type === 'recovery' && token) {
          console.log('üîÑ Method 2: Using PKCE token for verification')
          
          // For PKCE flow, we need to verify the token with Supabase
          try {
            const { data, error } = await supabase.auth.verifyOtp({
              token_hash: token,
              type: 'recovery'
            })
            
            if (error) {
              console.error('‚ùå Error verifying PKCE token:', error)
              // Don't throw error immediately, try other methods
              console.log('‚ö†Ô∏è PKCE verification failed, trying other methods...')
            } else if (data.session) {
              console.log('‚úÖ Session established successfully with PKCE token')
              setIsValidSession(true)
              toast({
                title: "‡¶∏‡ßá‡¶∂‡¶® ‡¶¨‡ßà‡¶ß",
                description: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
              })
              return
            }
          } catch (verifyError) {
            console.error('‚ùå PKCE verification failed:', verifyError)
            // Continue to other methods
            console.log('‚ö†Ô∏è Trying alternative verification methods...')
          }
        }
        
        // Method 3: Check if user is already authenticated (direct access)
        const { data: { session }, error: sessionError } = await supabase.auth.getSession()
        
        if (sessionError) {
          console.error('‚ùå Error getting current session:', sessionError)
        }
        
        if (session) {
          console.log('‚úÖ Method 3: Using existing session')
          setIsValidSession(true)
          toast({
            title: "‡¶∏‡ßá‡¶∂‡¶® ‡¶¨‡ßà‡¶ß",
            description: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
          })
          return
        }
        
        // Method 4: Try alternative verification for recovery type with any token
        if (type === 'recovery' && (token || accessToken)) {
          console.log('üîÑ Method 4: Alternative recovery verification')
          try {
            // Try to exchange token for session
            const tokenToUse = token || accessToken
            if (tokenToUse) {
              console.log('üé´ Attempting to exchange token for session...')
              
              // Create a temporary session to test password reset capability
              const { data: userData, error: userError } = await supabase.auth.getUser(tokenToUse)
              
              if (!userError && userData.user) {
                console.log('‚úÖ Method 4: Token is valid, allowing password reset')
                setIsValidSession(true)
                toast({
                  title: "‡¶∏‡ßá‡¶∂‡¶® ‡¶¨‡ßà‡¶ß",
                  description: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
                })
                return
              }
            }
          } catch (altError) {
            console.error('‚ùå Alternative verification failed:', altError)
          }
        }
        
        // If none of the methods work, but we have recovery type with valid token, allow password reset
        if (type === 'recovery' && (token || accessToken)) {
          console.log('‚ö†Ô∏è Recovery type detected with token - allowing password reset attempt')
          setIsValidSession(true)
          toast({
            title: "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡ßà‡¶ß",
            description: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
          })
          return
        }
        
        // If none of the methods work, throw error
        console.log('‚ùå No valid authentication method found')
        throw new Error('Invalid reset link - no valid authentication method found')
        
      } catch (error: any) {
        console.error('‚ùå Reset session error:', error)
        
        // Generate detailed debug report for troubleshooting
        const debugReport = urlParams.generateDebugReport()
        console.log('üìã Debug Report:', debugReport)
        
        let errorTitle = "‡¶Ö‡¶¨‡ßà‡¶ß ‡¶≤‡¶ø‡¶Ç‡¶ï"
        let errorDescription = "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶¨‡¶æ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        
        // Customize error message based on the type of error
        if (isOtpExpired) {
          errorTitle = "OTP ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑"
          errorDescription = "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        } else if (hasError) {
          errorTitle = "‡¶Ö‡¶•‡ßá‡¶®‡¶ü‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø"
          errorDescription = errorMessage || "‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶•‡ßá‡¶®‡¶ü‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        }
        
        toast({
          title: errorTitle,
          description: errorDescription,
          variant: "destructive",
        })
        
        // Redirect to login page after a short delay
        setTimeout(() => navigate("/login"), 5000)
      } finally {
        setSessionChecked(true)
        isExecuting = false
      }
    }

    checkResetSession()
  }, [searchParams, navigate, toast]) // Simplified dependencies to prevent rapid re-execution

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value })
  }

  const validatePassword = (password: string) => {
    if (password.length < 6) {
      return "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß¨ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá"
    }
    // Simple validation - just check minimum length
    // Allow any combination of characters, numbers, or symbols
    return null
  }

  // Handle requesting a new reset link
  const handleRequestNewLink = async () => {
    if (!newLinkEmail.trim()) {
      toast({
        title: "‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®",
        description: "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶¶‡¶ø‡¶®‡•§",
        variant: "destructive",
      })
      return
    }

    setNewLinkLoading(true)
    setShowNewLinkSuccess(false)
    setRateLimitInfo(null)

    try {
      // Get the correct redirect URL based on current environment
      let redirectUrl
      redirectUrl = `${window.location.origin}/reset-password`

      console.log('üîÑ Requesting new password reset link for:', newLinkEmail)
      console.log('üîó Redirect URL:', redirectUrl)

      const { data, error } = await supabase.auth.resetPasswordForEmail(
        newLinkEmail.trim(),
        {
          redirectTo: redirectUrl,
        }
      )

      if (error) {
        // Handle rate limiting error specifically
        if (error.message?.includes('rate limit') || error.message?.includes('too many requests')) {
          // Try to extract rate limit info from error (this depends on Supabase's error format)
          const rateLimitMatch = error.message.match(/(\d+)\s*seconds?/i)
          const waitTime = rateLimitMatch ? parseInt(rateLimitMatch[1]) : 60
          const resetTime = new Date(Date.now() + waitTime * 1000).toLocaleTimeString('bn-BD')
          
          setRateLimitInfo({
            remaining: waitTime,
            resetTime
          })
          
          toast({
            title: "‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß‡ßá‡¶∞ ‡¶∏‡ßÄ‡¶Æ‡¶æ ‡¶Ö‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶Æ",
            description: `‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßá‡¶∂‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ${waitTime} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`,
            variant: "destructive",
          })
          return
        }
        
        throw error
      }

      setShowNewLinkSuccess(true)
      toast({
        title: "‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        description: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡¶¨‡¶ï‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      })

      console.log('‚úÖ New password reset email sent successfully')

    } catch (error: any) {
      console.error('‚ùå Error requesting new reset link:', error)
      toast({
        title: "‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ",
        description: error.message || "‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        variant: "destructive",
      })
    } finally {
      setNewLinkLoading(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)

    try {
      // Validate passwords
      if (!formData.password || !formData.confirmPassword) {
        toast({
          title: "‡¶∏‡¶¨ ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®",
          description: "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶¨ ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
          variant: "destructive",
        })
        return
      }

      if (formData.password !== formData.confirmPassword) {
        toast({
          title: "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Æ‡¶ø‡¶≤‡¶õ‡ßá ‡¶®‡¶æ",
          description: "‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶è‡¶ï‡¶á ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
          variant: "destructive",
        })
        return
      }

      const passwordError = validatePassword(formData.password)
      if (passwordError) {
        toast({
          title: "‡¶¶‡ßÅ‡¶∞‡ßç‡¶¨‡¶≤ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°",
          description: passwordError,
          variant: "destructive",
        })
        return
      }

      // Get current session before updating password
      const { data: { session }, error: sessionError } = await supabase.auth.getSession()
      
      if (sessionError || !session) {
        // If no session, try to establish one using URL parameters
        const { accessToken, refreshToken, token, type } = urlParams.extractTokens()
        
        if (type === 'recovery') {
          if (accessToken && refreshToken) {
            // Try to set session using tokens
            const { data: sessionData, error: setSessionError } = await supabase.auth.setSession({
              access_token: accessToken,
              refresh_token: refreshToken,
            })
            
            if (setSessionError || !sessionData.session) {
              throw new Error('‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø session ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§')
            }
          } else if (token) {
            // Try PKCE token verification
            const { data: verifyData, error: verifyError } = await supabase.auth.verifyOtp({
              token_hash: token,
              type: 'recovery'
            })
            
            if (verifyError || !verifyData.session) {
              throw new Error('‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶®‡¶ø‡¶®‡•§')
            }
          } else {
            throw new Error('‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º authentication token ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§')
          }
        } else {
          throw new Error('‡¶Ö‡¶¨‡ßà‡¶ß authentication session‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§')
        }
      }
      
      console.log('üîê Updating password with valid session...')
      
      // Update password
      const { error } = await supabase.auth.updateUser({
        password: formData.password
      })

      if (error) {
        console.error('‚ùå Password update error:', error)
        throw error
      }

      toast({
        title: "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶∏‡¶´‡¶≤! ‚úÖ",
        description: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßá‡¶ú‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...",
        duration: 4000,
      })

      console.log('‚úÖ Password reset successful, redirecting to login...')
      
      // Sign out and redirect to login after a short delay to show success message
      setTimeout(async () => {
        await supabase.auth.signOut()
        navigate("/login", { 
          replace: true,
          state: { message: '‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§' }
        })
      }, 2000)

    } catch (error: any) {
      console.error("Password reset error:", error)
      toast({
        title: "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ",
        description: error.message || "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  // Show loading state while checking session
  if (!sessionChecked) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 px-4 py-8">
        <Card className="w-full max-w-md">
          <CardContent className="pt-6">
            <div className="flex items-center justify-center space-x-2">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
              <span>‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</span>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Show error state if session is invalid
  if (!isValidSession) {
    // Determine the appropriate error icon and message
    const ErrorIcon = isOtpExpired ? Clock : hasError ? AlertTriangle : Shield
    const errorTitle = isOtpExpired ? "OTP ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑" : hasError ? "‡¶Ö‡¶•‡ßá‡¶®‡¶ü‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø" : "‡¶Ö‡¶¨‡ßà‡¶ß ‡¶≤‡¶ø‡¶Ç‡¶ï"
    const errorDesc = isOtpExpired 
      ? "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
      : hasError 
      ? (errorMessage || "‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶•‡ßá‡¶®‡¶ü‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
      : "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶¨‡¶æ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßá‡¶ú‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
    
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 px-4 py-8">
        <Card className="w-full max-w-2xl">
          <CardContent className="pt-6 space-y-4">
            <Alert variant="destructive">
              <ErrorIcon className="h-4 w-4" />
              <AlertTitle>{errorTitle}</AlertTitle>
              <AlertDescription>
                {errorDesc}
              </AlertDescription>
            </Alert>
            
            {/* Show specific error details if available */}
            {hasError && (
              <Alert className="bg-orange-50 border-orange-200">
                <AlertTriangle className="h-4 w-4 text-orange-600" />
                <AlertTitle className="text-orange-800">‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§</AlertTitle>
                <AlertDescription className="text-orange-700">
                  <div className="space-y-1">
                    {params.error && <div><strong>Error:</strong> {params.error}</div>}
                    {params.error_code && <div><strong>Error Code:</strong> {params.error_code}</div>}
                    {params.error_description && <div><strong>Description:</strong> {params.error_description}</div>}
                  </div>
                </AlertDescription>
              </Alert>
            )}
            
            {/* Special handling for OTP expired error - Enhanced with direct request functionality */}
            {(isOtpExpired || !isValidAuthFlow) && (
              <Alert className="bg-blue-50 border-blue-200">
                <Clock className="h-4 w-4 text-blue-600" />
                <AlertTitle className="text-blue-800">‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶®</AlertTitle>
                <AlertDescription className="text-blue-700">
                  <div className="space-y-4 mt-3">
                    <p>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶¶‡¶ø‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßã:</p>
                    
                    <div className="space-y-3">
                      <Input
                        type="email"
                        placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ"
                        value={newLinkEmail}
                        onChange={(e) => setNewLinkEmail(e.target.value)}
                        disabled={newLinkLoading}
                        className="bg-white"
                      />
                      
                      <Button 
                        onClick={handleRequestNewLink}
                        disabled={newLinkLoading || !newLinkEmail.trim()}
                        className="w-full bg-blue-600 hover:bg-blue-700 text-white"
                      >
                        {newLinkLoading ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...
                          </>
                        ) : (
                          <>
                            <Mail className="mr-2 h-4 w-4" />
                            ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®
                          </>
                        )}
                      </Button>
                    </div>
                    
                    {/* Success message */}
                    {showNewLinkSuccess && (
                      <Alert className="bg-green-50 border-green-200 mt-3">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <AlertTitle className="text-green-800">‡¶∏‡¶´‡¶≤!</AlertTitle>
                        <AlertDescription className="text-green-700">
                          ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡¶¨‡¶ï‡ßç‡¶∏ (‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶Æ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞) ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                        </AlertDescription>
                      </Alert>
                    )}
                    
                    {/* Rate limit information */}
                    {rateLimitInfo && (
                      <Alert className="bg-yellow-50 border-yellow-200 mt-3">
                        <Clock className="h-4 w-4 text-yellow-600" />
                        <AlertTitle className="text-yellow-800">‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®</AlertTitle>
                        <AlertDescription className="text-yellow-700">
                          ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßá‡¶∂‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø {rateLimitInfo.resetTime} ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                        </AlertDescription>
                      </Alert>
                    )}
                  </div>
                </AlertDescription>
              </Alert>
            )}
            
            {/* Debug information - enhanced with new utility */}
            <details className="bg-gray-50 p-4 rounded-lg">
              <summary className="cursor-pointer font-medium text-sm text-gray-700 mb-2">
                ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶§‡¶•‡ßç‡¶Ø (‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
              </summary>
              <div className="text-xs space-y-3 text-gray-600">
                <div>
                  <strong>URL Analysis:</strong>
                  <div className="bg-white p-2 rounded border space-y-1">
                    <div>Has Error: <span className={hasError ? 'text-red-600' : 'text-green-600'}>{hasError ? 'Yes' : 'No'}</span></div>
                    <div>OTP Expired: <span className={isOtpExpired ? 'text-red-600' : 'text-green-600'}>{isOtpExpired ? 'Yes' : 'No'}</span></div>
                    <div>Valid Auth Flow: <span className={isValidAuthFlow ? 'text-green-600' : 'text-red-600'}>{isValidAuthFlow ? 'Yes' : 'No'}</span></div>
                    <div>Parameters Found: {Object.keys(params).length}</div>
                  </div>
                </div>
                
                <div>
                  <strong>Current URL:</strong>
                  <pre className="bg-white p-2 rounded border text-xs overflow-x-auto">
                    {debugInfo.url}
                  </pre>
                </div>
                
                <div>
                  <strong>All Parameters:</strong>
                  <pre className="bg-white p-2 rounded border text-xs">
                    {JSON.stringify(params, null, 2)}
                  </pre>
                </div>
                
                <div>
                  <strong>Debug Report:</strong>
                  <pre className="bg-white p-2 rounded border text-xs max-h-40 overflow-y-auto">
                    {urlParams.generateDebugReport()}
                  </pre>
                </div>
                
                <div>
                  <strong>Expected Parameters:</strong>
                  <ul className="list-disc list-inside space-y-1 text-xs">
                    <li>PKCE Flow: <code>?token=xxx&type=recovery</code></li>
                    <li>Traditional Flow: <code>?access_token=xxx&refresh_token=xxx&type=recovery</code></li>
                    <li>Error Flow: <code>?error=xxx&error_code=xxx&error_description=xxx</code></li>
                  </ul>
                </div>
              </div>
            </details>
            
            <div className="flex gap-2">
              <Button 
                onClick={() => navigate("/login")} 
                className="flex-1"
              >
                ‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßá‡¶ú‡ßá ‡¶Ø‡¶æ‡¶®
              </Button>
              {isOtpExpired ? (
                <Button 
                  onClick={() => navigate("/login")} 
                  variant="outline"
                  className="flex-1"
                >
                  <RefreshCw className="mr-2 h-4 w-4" />
                  ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶®
                </Button>
              ) : (
                <Button 
                  onClick={() => window.location.reload()} 
                  variant="outline"
                  className="flex-1"
                >
                  ‡¶™‡ßá‡¶ú ‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 px-4 py-8">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1 text-center">
          <CardTitle className="text-2xl font-bold flex items-center justify-center gap-2">
            <Lock className="h-6 w-6" />
            ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
          </CardTitle>
          <CardDescription>
            ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
          </CardDescription>
        </CardHeader>
        
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="password">‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°</Label>
              <div className="relative">
                <Input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  placeholder="‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°"
                  value={formData.password}
                  onChange={handleChange}
                  required
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeOff className="h-4 w-4" />
                  ) : (
                    <Eye className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="confirmPassword">‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®</Label>
              <div className="relative">
                <Input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  placeholder="‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  required
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                >
                  {showConfirmPassword ? (
                    <EyeOff className="h-4 w-4" />
                  ) : (
                    <Eye className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </div>
          </CardContent>
          
          <CardFooter className="flex flex-col space-y-4">
            <Button 
              type="submit" 
              className="w-full" 
              disabled={loading}
            >
              {loading ? "‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." : "‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"}
            </Button>
            <div className="text-sm text-center">
              <Button
                type="button"
                variant="link"
                className="text-blue-600 hover:underline"
                onClick={() => navigate("/login")}
              >
                ‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßá‡¶ú‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®
              </Button>
            </div>
          </CardFooter>
        </form>
      </Card>
    </div>
  )
}
