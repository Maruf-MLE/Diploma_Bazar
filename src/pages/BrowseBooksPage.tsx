import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Search, Filter, MessageCircle, CheckCircle, Star, BookOpen, Loader2, Eye, Heart, ShoppingCart, ChevronDown, ChevronRight, ArrowUp, X, Play } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Link, useNavigate, useSearchParams } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import { useProfile } from '@/hooks/useProfile';
import { BookEntity, BookFilter, getBooks } from '@/lib/BookEntity';
import { useSupabaseRealtime } from '@/hooks/useSupabaseRealtime';
import { Slider } from '@/components/ui/slider';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbSeparator } from '@/components/ui/breadcrumb';
import Navigation from '@/components/Navigation';
import MessageDialog from '@/components/MessageDialog';
import { supabase, getUserVerificationStatus } from '@/lib/supabase';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';
import '@/styles/book-card.css';

// Define interface for BookCard props
interface BookCardProps {
  book: BookEntity;
  wishlist: Set<string>;
  handleViewBookDetails: (book: BookEntity) => void;
  toggleWishlist: (bookId: string) => void;
  handleContactSeller: (book: BookEntity) => void;
  handlePurchaseRequest: (book: BookEntity) => void;
  getConditionLabel: (condition: string) => string;
  getCategoryLabel: (category: string) => string;
  getDepartmentLabel: (department: string) => string;
  handleDepartmentClick: (department: string) => void;
}

// Define debounce utility function
const debounce = (func: Function, wait: number) => {
  let timeout: ReturnType<typeof setTimeout>;
  return function(...args: any[]) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
};

const bookConditions = [
  { value: 'new', label: '‡¶®‡¶§‡ßÅ‡¶®' },
  { value: 'like_new', label: '‡¶®‡¶§‡ßÅ‡¶®‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã' },
  { value: 'good', label: '‡¶≠‡¶æ‡¶≤‡ßã' },
  { value: 'acceptable', label: '‡¶Æ‡ßã‡¶ü‡¶æ‡¶Æ‡ßÅ‡¶ü‡¶ø' },
  { value: 'poor', label: '‡¶™‡ßÅ‡¶∞‡¶®‡ßã' }
];

const bookCategories = [
  { value: 'academic', label: '‡¶è‡¶ï‡¶æ‡¶°‡ßá‡¶Æ‡¶ø‡¶ï' },
  { value: 'novel', label: '‡¶â‡¶™‡¶®‡ßç‡¶Ø‡¶æ‡¶∏' },
  { value: 'story', label: '‡¶ó‡¶≤‡ßç‡¶™' },
  { value: 'scifi', label: '‡¶∏‡¶æ‡¶á‡¶®‡ßç‡¶∏ ‡¶´‡¶ø‡¶ï‡¶∂‡¶®' },
  { value: 'religious', label: '‡¶ß‡¶∞‡ßç‡¶Æ‡ßÄ‡¶Ø‡¶º' },
  { value: 'selfhelp', label: '‡¶Ü‡¶§‡ßç‡¶Æ-‡¶â‡¶®‡ßç‡¶®‡¶Ø‡¶º‡¶®' },
  { value: 'biography', label: '‡¶ú‡ßÄ‡¶¨‡¶®‡ßÄ' },
  { value: 'history', label: '‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏' },
  { value: 'science', label: '‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®' },
  { value: 'poetry', label: '‡¶ï‡¶¨‡¶ø‡¶§‡¶æ' },
  { value: 'comics', label: '‡¶ï‡¶Æ‡¶ø‡¶ï‡¶∏' },
  { value: 'reference', label: '‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏' },
  { value: 'other', label: '‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø' }
];

// ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®, ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞, ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó, ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ ‡¶°‡ßç‡¶∞‡¶™‡¶°‡¶æ‡¶â‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶æ‡¶ü‡¶æ
const departments = [
  { value: '‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶∏‡¶ø‡¶≠‡¶ø‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶∏‡¶ø‡¶≠‡¶ø‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶Æ‡ßá‡¶ï‡¶æ‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶Æ‡ßá‡¶ï‡¶æ‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶®‡¶ø‡¶ï‡ßç‡¶∏ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶®‡¶ø‡¶ï‡ßç‡¶∏ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶Æ‡ßá‡¶ï‡¶æ‡¶ü‡ßç‡¶∞‡¶®‡¶ø‡¶ï‡ßç‡¶∏ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶Æ‡ßá‡¶ï‡¶æ‡¶ü‡ßç‡¶∞‡¶®‡¶ø‡¶ï‡ßç‡¶∏ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶∞‡ßá‡¶´‡ßç‡¶∞‡¶ø‡¶ú‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶è‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶°‡¶ø‡¶∂‡¶®‡¶ø‡¶Ç ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶∞‡ßá‡¶´‡ßç‡¶∞‡¶ø‡¶ú‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶è‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶°‡¶ø‡¶∂‡¶®‡¶ø‡¶Ç ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶Ö‡¶ü‡ßã‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶Ö‡¶ü‡ßã‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡¶æ‡¶á‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡¶æ‡¶á‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶∂‡¶ø‡¶™‡¶¨‡¶ø‡¶≤‡ßç‡¶°‡¶ø‡¶Ç ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶∂‡¶ø‡¶™‡¶¨‡¶ø‡¶≤‡ßç‡¶°‡¶ø‡¶Ç ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶Æ‡ßá‡¶∞‡¶ø‡¶® ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶Æ‡ßá‡¶∞‡¶ø‡¶® ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶´‡ßÅ‡¶° ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶´‡ßÅ‡¶° ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶Ü‡¶∞‡ßç‡¶ï‡¶ø‡¶ü‡ßá‡¶ï‡¶ö‡¶æ‡¶∞', label: '‡¶Ü‡¶∞‡ßç‡¶ï‡¶ø‡¶ü‡ßá‡¶ï‡¶ö‡¶æ‡¶∞' },
  { value: '‡¶ï‡ßá‡¶Æ‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶ï‡ßá‡¶Æ‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶¨‡¶æ‡¶Ø‡¶º‡ßã‡¶Æ‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶¨‡¶æ‡¶Ø‡¶º‡ßã‡¶Æ‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶Æ‡¶æ‡¶á‡¶®‡¶ø‡¶Ç ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶Æ‡¶æ‡¶á‡¶®‡¶ø‡¶Ç ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶®‡¶ø‡¶â‡¶ï‡ßç‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶®‡¶ø‡¶â‡¶ï‡ßç‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' },
  { value: '‡¶™‡ßá‡¶ü‡ßç‡¶∞‡ßã‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶™‡ßá‡¶ü‡ßç‡¶∞‡ßã‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø' }
];

// Book Card Component - Extracted for better code organization
const BookCard = ({ 
  book, 
  wishlist, 
  handleViewBookDetails, 
  toggleWishlist, 
  handleContactSeller, 
  handlePurchaseRequest, 
  getConditionLabel, 
  getCategoryLabel,
  getDepartmentLabel,
  handleDepartmentClick 
}: BookCardProps) => {
  return (
    <Card 
      className="book-card"
      onClick={() => handleViewBookDetails(book)}
    >
      {/* Book Image */}
      <div className="book-image">
        {book.cover_image_url ? (
          <img 
            src={book.cover_image_url} 
            alt={book.title} 
            className="w-full h-full object-cover"
            loading="lazy"
          />
        ) : (
          <div className="book-icon">üìö</div>
        )}
        
        {/* Price Overlay */}
        <div className="price-overlay">
          <div className="price-tag-overlay">
            ‡ß≥{book.price}
          </div>
          {book.discount_rate && (
            <div className="discount-overlay">
              {book.discount_rate}% ‡¶õ‡¶æ‡¶°‡¶º
            </div>
          )}
        </div>
      </div>

      {/* Book Title */}
      <h3 className="book-title">{book.title}</h3>

      {/* Semester and Publisher - Positions Exchanged */}
      <div className="publisher-semester">
        <div className="semester-badge">
          {book.semester || '‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶®‡ßá‡¶á'}
        </div>
        <div className="publisher-info-simple">
          <div className="publisher-text-simple publisher-badge">
            {/* Show only '‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤' for '‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ' on mobile, full name on larger screens */}
            <span className="block md:hidden">
              {book.publisher === '‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ' ? '‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤' : (book.publisher || '‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶®‡ßá‡¶á')}
            </span>
            <span className="hidden md:block">
              {book.publisher || '‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶®‡ßá‡¶á'}
            </span>
          </div>
        </div>
      </div>

      {/* Academic Info - Only Institute like home page */}
      <div className="academic-info">
        <div className="academic-details">
          <div className="academic-item">
            <span className="academic-label">‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®: </span>
            <span className="academic-value">
              {book.institute_name || '‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶®‡ßá‡¶á'}
            </span>
          </div>
        </div>
      </div>

      {/* Seller Info */}
      <div className="seller-info">
        <div className="seller-profile">
          <div className="seller-avatar">
            {book.seller_avatar_url ? (
              <img 
                src={book.seller_avatar_url} 
                alt={book.seller_name || '‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ'}
                className="seller-avatar-img"
              />
            ) : (
              <div className="seller-avatar-placeholder">
                {(book.seller_name || 'U').charAt(0).toUpperCase()}
              </div>
            )}
          </div>
          <div className="seller-details">
            <span className="seller-label desktop-only">‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ: </span>
            <span className="seller-name">
              {book.seller_name || '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ'}
            </span>
          </div>
        </div>
      </div>

      {/* Card Actions */}
      <div className="card-actions flex gap-2">
        <button 
          className="btn-primary flex-1"
          onClick={(e) => {
            e.stopPropagation();
            handleContactSeller(book);
          }}
        >
          ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
        </button>
        <button 
          className="btn-secondary flex-1"
          onClick={(e) => {
            e.stopPropagation();
            handleViewBookDetails(book);
          }}
        >
          ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§
        </button>
      </div>
    </Card>
  );
};

// Filter Dialog Component with TypeScript typing
interface FilterDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  filters: BookFilter;
  setFilters: React.Dispatch<React.SetStateAction<BookFilter>>;
  priceRange: [number, number];
  setPriceRange: React.Dispatch<React.SetStateAction<[number, number]>>;
  sortOption: string;
  setSortOption: React.Dispatch<React.SetStateAction<string>>;
  resetAllFilters: () => void;
}

const FilterDialog = ({ 
  open, 
  onOpenChange, 
  filters, 
  setFilters, 
  priceRange, 
  setPriceRange,
  sortOption,
  setSortOption,
  resetAllFilters
}: FilterDialogProps) => {
  // Local state to track changes before applying
  const [localFilters, setLocalFilters] = useState<BookFilter>({...filters});
  const [localPriceRange, setLocalPriceRange] = useState<[number, number]>([...priceRange]);
  
  // Update local state when props change or dialog opens
  useEffect(() => {
    if (open) {
      setLocalFilters({...filters});
      setLocalPriceRange([...priceRange]);
    }
  }, [open, filters, priceRange]);
  
  // Apply filters and close dialog
  const handleApplyFilters = () => {
    console.log('Applying filters:', { localFilters, localPriceRange });
    setFilters({...localFilters});
    setPriceRange([...localPriceRange]);
    onOpenChange(false);
  };
  
  // Reset filters locally
  const handleResetFilters = () => {
    console.log('Resetting local filters');
    setLocalFilters({});
    setLocalPriceRange([0, 5000]);
    setSortOption('oldest');
  };
  
  // Apply reset globally
  const handleGlobalReset = () => {
    console.log('Resetting all filters globally');
    handleResetFilters();
    resetAllFilters();
    onOpenChange(false);
  };

  // Handle keyboard events for accessibility
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && open) {
        console.log('Closing filter dialog with Escape key');
        onOpenChange(false);
      }
    };

    if (open) {
      window.addEventListener('keydown', handleKeyDown);
    }

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [open, onOpenChange]);

  // If not open, don't render
  if (!open) return null;
  
  return (
    <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4 overflow-y-auto" onClick={(e) => {
      if (e.target === e.currentTarget) {
        onOpenChange(false);
      }
    }}>
      <div className="bg-white w-full max-w-md sm:max-w-sm md:max-w-md rounded-lg shadow-xl animate-in fade-in-0 zoom-in-90 duration-300 max-h-[85vh] sm:max-h-[90vh] overflow-hidden flex flex-col" onClick={(e) => e.stopPropagation()}>
        <div className="flex justify-between items-center p-4 border-b">
          <h2 className="text-lg font-semibold flex items-center gap-2">
            <Filter className="h-4 w-4 text-primary" />
            ‡¶¨‡¶á ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
          </h2>
          <Button variant="ghost" size="sm" className="h-8 w-8 rounded-full p-0" onClick={() => onOpenChange(false)}>
            <X className="h-4 w-4" />
          </Button>
        </div>
        
        <div className="overflow-y-auto flex-grow p-4 max-h-[60vh]">
          <div className="space-y-5">
            {/* Price Range Slider */}
            <div>
              <div className="flex items-center justify-between mb-3">
                <p className="text-sm font-medium">‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶™‡¶∞‡¶ø‡¶∏‡ßÄ‡¶Æ‡¶æ</p>
                <div className="flex items-center gap-2 text-xs">
                  <Badge variant="outline" className="bg-background/50 border-primary/10">‡ß≥{localPriceRange[0]}</Badge>
                  <span className="text-muted-foreground">-</span>
                  <Badge variant="outline" className="bg-background/50 border-primary/10">‡ß≥{localPriceRange[1]}</Badge>
                </div>
              </div>
              <Slider 
                value={[localPriceRange[0], localPriceRange[1]]} 
                min={0} 
                max={5000} 
                step={100}
                onValueChange={(value) => setLocalPriceRange([value[0], value[1]])}
                className="mt-2"
              />
            </div>
            
            <Separator className="my-1" />
            
            {/* Sorting Options */}
            <div>
              <label className="text-sm font-medium mb-2 block">‡¶∏‡¶æ‡¶ú‡¶æ‡¶®</label>
              <Select 
                value={sortOption}
                onValueChange={(value) => setSortOption(value)}
              >
                <SelectTrigger className="bg-background/50 border-primary/10 hover:border-primary/20 focus:border-primary/30 h-11">
                  <SelectValue placeholder="‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã‡¶∞ ‡¶ï‡ßç‡¶∞‡¶Æ" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="newest">‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ (‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡¶ó‡ßá)</SelectItem>
                  <SelectItem value="oldest">‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶® ‡¶Ü‡¶ó‡ßá</SelectItem>
                  <SelectItem value="price_low">‡¶ï‡¶Æ ‡¶¶‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∂‡¶ø</SelectItem>
                  <SelectItem value="price_high">‡¶¨‡ßá‡¶∂‡¶ø ‡¶¶‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶Æ</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <Separator className="my-1" />
            
            {/* Department Filter */}
            <div>
              <label className="text-sm font-medium mb-2 block">‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó</label>
              <Select 
                value={localFilters.department || "any"}
                onValueChange={(value) => {
                  setLocalFilters(prev => ({ 
                    ...prev, 
                    department: value === "any" ? undefined : value 
                  }));
                }}
              >
                <SelectTrigger className="bg-background/50 border-primary/10 hover:border-primary/20 focus:border-primary/30 h-11">
                  <SelectValue placeholder="‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="any">‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó</SelectItem>
                  {departments.map(dept => (
                    <SelectItem key={dept.value} value={dept.value}>
                      {dept.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            {/* Semester Filter */}
            <div>
              <label className="text-sm font-medium mb-2 block">‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞</label>
              <Select 
                value={localFilters.semester || "any"}
                onValueChange={(value) => {
                  setLocalFilters(prev => ({ 
                    ...prev, 
                    semester: value === "any" ? undefined : value 
                  }));
                }}
              >
                <SelectTrigger className="bg-background/50 border-primary/10 hover:border-primary/20 focus:border-primary/30 h-11">
                  <SelectValue placeholder="‡¶∏‡¶¨ ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="any">‡¶∏‡¶¨ ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞</SelectItem>
                  <SelectItem value="‡ßß‡¶Æ ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞">‡ßß‡¶Æ ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞</SelectItem>
                  <SelectItem value="‡ß®‡¶Ø‡¶º ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞">‡ß®‡¶Ø‡¶º ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞</SelectItem>
                  <SelectItem value="‡ß©‡¶Ø‡¶º ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞">‡ß©‡¶Ø‡¶º ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞</SelectItem>
                  <SelectItem value="‡ß™‡¶∞‡ßç‡¶• ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞">‡ß™‡¶∞‡ßç‡¶• ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞</SelectItem>
                  <SelectItem value="‡ß´‡¶Æ ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞">‡ß´‡¶Æ ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞</SelectItem>
                  <SelectItem value="‡ß¨‡¶∑‡ßç‡¶† ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞">‡ß¨‡¶∑‡ßç‡¶† ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞</SelectItem>
                  <SelectItem value="‡ß≠‡¶Æ ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞">‡ß≠‡¶Æ ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞</SelectItem>
                  <SelectItem value="‡ßÆ‡¶Æ ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞">‡ßÆ‡¶Æ ‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            {/* Publisher Filter */}
            <div>
              <label className="text-sm font-medium mb-2 block">‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ</label>
              <Select 
                value={localFilters.publisher || "any"}
                onValueChange={(value) => {
                  setLocalFilters(prev => ({ 
                    ...prev, 
                    publisher: value === "any" ? undefined : value 
                  }));
                }}
              >
                <SelectTrigger className="bg-background/50 border-primary/10 hover:border-primary/20 focus:border-primary/30 h-11">
                  <SelectValue placeholder="‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="any">‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ</SelectItem>
                  <SelectItem value="‡¶π‡¶ï ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ">‡¶π‡¶ï ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ</SelectItem>
                  <SelectItem value="‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ">‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶®‡ßÄ</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            {/* Institution Filter */}
            <div>
              <label className="text-sm font-medium mb-2 block">‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®</label>
              <Select 
                value={localFilters.institute_name || "any"}
                onValueChange={(value) => {
                  setLocalFilters(prev => ({ 
                    ...prev, 
                    institute_name: value === "any" ? undefined : value 
                  }));
                }}
              >
                <SelectTrigger className="bg-background/50 border-primary/10 hover:border-primary/20 focus:border-primary/30 h-11">
                  <SelectValue placeholder="‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="any">‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®</SelectItem>
                  <SelectItem value="‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶≠‡ßã‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶≠‡ßã‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶¨‡¶ó‡ßÅ‡¶°‡¶º‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶¨‡¶ó‡ßÅ‡¶°‡¶º‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶¨‡ßç‡¶∞‡¶æ‡¶π‡ßç‡¶Æ‡¶£‡¶¨‡¶æ‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶¨‡ßç‡¶∞‡¶æ‡¶π‡ßç‡¶Æ‡¶£‡¶¨‡¶æ‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶∏‡ßÅ‡¶á‡¶°‡ßá‡¶® ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶∏‡ßÅ‡¶á‡¶°‡ßá‡¶® ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶¨‡¶∞‡¶ó‡ßÅ‡¶®‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶¨‡¶∞‡¶ó‡ßÅ‡¶®‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü ‡¶Ö‡¶¨ ‡¶ó‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶∏‡¶ø‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ï‡¶∏">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü ‡¶Ö‡¶¨ ‡¶ó‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶∏‡¶ø‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ï‡¶∏</SelectItem>
                  <SelectItem value="‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡ßá ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡ßá ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ï‡¶ï‡ßç‡¶∏‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ï‡¶ï‡ßç‡¶∏‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ö‡¶æ‡¶Å‡¶™‡¶æ‡¶á‡¶®‡¶¨‡¶æ‡¶¨‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ö‡¶æ‡¶Å‡¶™‡¶æ‡¶á‡¶®‡¶¨‡¶æ‡¶¨‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ö‡¶æ‡¶Å‡¶¶‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ö‡¶æ‡¶Å‡¶¶‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶¢‡¶æ‡¶ï‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶¢‡¶æ‡¶ï‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶¢‡¶æ‡¶ï‡¶æ ‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶¢‡¶æ‡¶ï‡¶æ ‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶¶‡¶ø‡¶®‡¶æ‡¶ú‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶¶‡¶ø‡¶®‡¶æ‡¶ú‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶´‡ßá‡¶®‡ßÄ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶´‡ßá‡¶®‡ßÄ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶´‡ßá‡¶®‡ßÄ ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶´‡ßá‡¶®‡ßÄ ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶´‡¶∞‡¶ø‡¶¶‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶´‡¶∞‡¶ø‡¶¶‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï ‡¶Ü‡¶∞‡ßç‡¶ü‡¶∏ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï ‡¶Ü‡¶∞‡ßç‡¶ü‡¶∏ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ó‡ßã‡¶™‡¶æ‡¶≤‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ó‡ßã‡¶™‡¶æ‡¶≤‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶π‡¶¨‡¶ø‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶π‡¶¨‡¶ø‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ù‡¶ø‡¶®‡¶æ‡¶á‡¶¶‡¶π ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ù‡¶ø‡¶®‡¶æ‡¶á‡¶¶‡¶π ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶Ø‡¶∂‡ßã‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶Ø‡¶∂‡ßã‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ ‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ ‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ï‡¶ø‡¶∂‡ßã‡¶∞‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ï‡¶ø‡¶∂‡ßã‡¶∞‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ï‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø‡¶Ø‡¶º‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ï‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø‡¶Ø‡¶º‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ï‡ßÅ‡¶°‡¶º‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ï‡ßÅ‡¶°‡¶º‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Æ‡ßÄ‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Æ‡ßÄ‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶Æ‡ßÅ‡¶®‡ßç‡¶∏‡¶ø‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶Æ‡ßÅ‡¶®‡ßç‡¶∏‡¶ø‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶Æ‡¶æ‡¶ó‡ßÅ‡¶∞‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶Æ‡¶æ‡¶ó‡ßÅ‡¶∞‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶®‡¶ì‡¶ó‡¶æ‡¶Å ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶®‡¶ì‡¶ó‡¶æ‡¶Å ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶®‡¶∏‡¶ø‡¶Ç‡¶π ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶®‡¶∏‡¶ø‡¶Ç‡¶π ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶Æ‡ßå‡¶≤‡¶≠‡ßÄ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶Æ‡ßå‡¶≤‡¶≠‡ßÄ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶®‡¶∞‡¶∏‡¶ø‡¶Ç‡¶¶‡ßÄ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶®‡¶∞‡¶∏‡¶ø‡¶Ç‡¶¶‡ßÄ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶™‡¶ü‡ßÅ‡¶Ø‡¶º‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶™‡¶ü‡ßÅ‡¶Ø‡¶º‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶™‡¶æ‡¶¨‡¶®‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶™‡¶æ‡¶¨‡¶®‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶∞‡¶Ç‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶∞‡¶Ç‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ ‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ ‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶∏‡¶æ‡¶§‡¶ï‡ßç‡¶∑‡ßÄ‡¶∞‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶∏‡¶æ‡¶§‡¶ï‡ßç‡¶∑‡ßÄ‡¶∞‡¶æ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶∂‡¶∞‡ßÄ‡¶Ø‡¶º‡¶§‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶∂‡¶∞‡ßÄ‡¶Ø‡¶º‡¶§‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶∂‡ßá‡¶∞‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶∂‡ßá‡¶∞‡¶™‡ßÅ‡¶∞ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶∏‡¶ø‡¶∞‡¶æ‡¶ú‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶∏‡¶ø‡¶∞‡¶æ‡¶ú‡¶ó‡¶û‡ßç‡¶ú ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶∏‡¶ø‡¶≤‡ßá‡¶ü ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶∏‡¶ø‡¶≤‡ßá‡¶ü ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶ü‡¶æ‡¶ô‡ßç‡¶ó‡¶æ‡¶á‡¶≤ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶ü‡¶æ‡¶ô‡ßç‡¶ó‡¶æ‡¶á‡¶≤ ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                  <SelectItem value="‡¶†‡¶æ‡¶ï‡ßÅ‡¶∞‡¶ó‡¶æ‡¶Å‡¶ì ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü">‡¶†‡¶æ‡¶ï‡ßÅ‡¶∞‡¶ó‡¶æ‡¶Å‡¶ì ‡¶™‡¶≤‡¶ø‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>
        
        <div className="flex justify-between gap-2 p-4 border-t sticky bottom-0 bg-white shadow-md">
          <Button 
            variant="ghost" 
            onClick={handleGlobalReset}
            className="bg-background/50 hover:bg-gray-100 hover:text-gray-700 hover:border-gray-300 transition-all duration-300 h-10"
          >
            <X className="h-4 w-4 mr-2" />
            ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
          </Button>
          
          <Button 
            onClick={handleApplyFilters}
            className="bg-primary text-white h-10 hover:bg-primary/90 hover:shadow-md transition-all duration-300 font-medium"
          >
            <Filter className="h-4 w-4 mr-2" />
            ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
          </Button>
        </div>
      </div>
    </div>
  );
};

const BrowseBooksPage = () => {
  const { user, isVerified, verificationLoading } = useAuth();
  const { profile } = useProfile();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [searchParams, setSearchParams] = useSearchParams();
  const [searchTerm, setSearchTerm] = useState(searchParams.get('search') || '');
  const [showFilters, setShowFilters] = useState(
    Boolean(searchParams.get('department')) || 
    Boolean(searchParams.get('category')) || 
    Boolean(searchParams.get('condition')) || 
    Boolean(searchParams.get('min_price')) || 
    Boolean(searchParams.get('max_price'))
  );
  const [isFilterDialogOpen, setIsFilterDialogOpen] = useState(false);
  const [isVideoDialogOpen, setIsVideoDialogOpen] = useState(false);
  
  // Track filter dialog state changes
  useEffect(() => {
    console.log('Filter dialog open state changed:', isFilterDialogOpen);
  }, [isFilterDialogOpen]);
  
  const [showBackToTop, setShowBackToTop] = useState(false);
  const [books, setBooks] = useState<BookEntity[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<BookFilter>({
    category: searchParams.get('category') || undefined,
    department: searchParams.get('department') || undefined,
    condition: searchParams.get('condition') || undefined,
    semester: searchParams.get('semester') || undefined,
    publisher: searchParams.get('publisher') || undefined,
    institute_name: searchParams.get('institute_name') || undefined
  });
  const [priceRange, setPriceRange] = useState<[number, number]>([
    parseInt(searchParams.get('min_price') || '0'), 
    parseInt(searchParams.get('max_price') || '5000')
  ]);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [hasMoreBooks, setHasMoreBooks] = useState(true);
  const [page, setPage] = useState(0);
  const [sortOption, setSortOption] = useState(searchParams.get('sort') || 'oldest');
  const BOOKS_PER_PAGE = 12;
  
  // State for message dialog
  const [isMessageDialogOpen, setIsMessageDialogOpen] = useState(false);
  const [messageBook, setMessageBook] = useState<BookEntity | null>(null);
  
  // State for wishlist (with local storage persistence)
  const [wishlist, setWishlist] = useState<Set<string>>(() => {
    const saved = localStorage.getItem('bookWishlist');
    return saved ? new Set(JSON.parse(saved)) : new Set();
  });

  // Update search params and save filter state
  useEffect(() => {
    const newParams = new URLSearchParams();
    
    if (searchTerm) newParams.set('search', searchTerm);
    if (filters.category) newParams.set('category', filters.category);
    if (filters.department) newParams.set('department', filters.department);
    if (filters.condition) newParams.set('condition', filters.condition);
    if (filters.semester) newParams.set('semester', filters.semester);
    if (filters.publisher) newParams.set('publisher', filters.publisher);
    if (filters.institute_name) newParams.set('institute_name', filters.institute_name);
    if (priceRange[0] > 0) newParams.set('min_price', priceRange[0].toString());
    if (priceRange[1] < 5000) newParams.set('max_price', priceRange[1].toString());
    if (sortOption !== 'newest') newParams.set('sort', sortOption);
    
    setSearchParams(newParams);
    
    // Save filter state to sessionStorage
    const filterState = {
      searchTerm,
      filters,
      priceRange,
      sortOption
    };
    sessionStorage.setItem('bookFilterState', JSON.stringify(filterState));
  }, [searchTerm, filters, priceRange, sortOption, setSearchParams]);

  // Load saved filter state on initial render
  useEffect(() => {
    // Only load saved state if there are no URL parameters
    if ([...searchParams.entries()].length === 0) {
      try {
        const savedState = sessionStorage.getItem('bookFilterState');
        if (savedState) {
          const { searchTerm: savedSearchTerm, filters: savedFilters, 
                  priceRange: savedPriceRange, sortOption: savedSortOption } = JSON.parse(savedState);
          
          console.log('Restoring saved filter state:', { savedSearchTerm, savedFilters, savedPriceRange, savedSortOption });
          
          // Restore saved state
          setSearchTerm(savedSearchTerm || '');
          setFilters(savedFilters || {});
          setPriceRange(savedPriceRange || [0, 5000]);
          setSortOption(savedSortOption || 'oldest');
        }
      } catch (err) {
        console.error('Error loading saved filter state:', err);
        // If there's an error, clear session storage
        sessionStorage.removeItem('bookFilterState');
      }
    }
  }, []);

  // Save wishlist to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem('bookWishlist', JSON.stringify([...wishlist]));
  }, [wishlist]);

  // Back to top button visibility
  useEffect(() => {
    const handleScroll = () => {
      setShowBackToTop(window.scrollY > 400);
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Memoize the callback function to prevent infinite updates
  const handleRealtimeUpdate = useCallback((payload) => {
    const newBook = payload.new as BookEntity;
    const oldBook = payload.old as BookEntity;
    
    if (payload.eventType === 'UPDATE') {
      setBooks(prev => 
        prev.map(book => book.id === newBook.id ? newBook : book)
      );
    } else if (payload.eventType === 'INSERT') {
      // Only add if it matches current filters
      if (
(!filters.category || filters.category === newBook.category) &&
        (!filters.condition || filters.condition === newBook.condition) &&
        (!filters.department || filters.department === newBook.department) &&
        (!filters.semester || filters.semester === newBook.semester) &&
        (!filters.publisher || filters.publisher === newBook.publisher) &&
        (newBook.price >= priceRange[0] && newBook.price <= priceRange[1])
      ) {
        setBooks(prev => [newBook, ...prev]);
      }
    } else if (payload.eventType === 'DELETE') {
      setBooks(prev => prev.filter(book => book.id !== oldBook.id));
    }
  }, [filters, priceRange]);

  // Subscribe to realtime updates
  useSupabaseRealtime(
    {
      table: 'books',
      event: '*'
    },
    handleRealtimeUpdate,
    true
  );

  // Fetch books when filters change
  useEffect(() => {
    fetchBooks();
  }, [searchTerm, filters, priceRange, sortOption]);

  // Fetch books from API with improved error handling
const fetchBooks = async () => {
    // ‡¶∏‡¶¨ ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶ø
    setLoading(true);
    setError(null);
    setPage(0);
    // Validate filters
    if (filters.semester === 'any') filters.semester = undefined;
    if (filters.publisher === 'any') filters.publisher = undefined;
    
    try {
      // ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Ö‡¶¨‡ßç‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶ø
      const bookFilter: BookFilter = {
        category: filters.category,
        condition: filters.condition,
        department: filters.department,
        semester: filters.semester,
        publisher: filters.publisher,
        institute_name: filters.institute_name,
        min_price: priceRange[0],
        max_price: priceRange[1],
        search_term: searchTerm
      };
      
      // Debug: ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
      console.log('=== Filter Debug Info ===');
      console.log('Current filters state:', filters);
      console.log('Price range:', priceRange);
      console.log('Search term:', searchTerm);
      console.log('Final book filter object:', JSON.stringify(bookFilter, null, 2));
      
      // ‡¶∏‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç ‡¶Ö‡¶™‡¶∂‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶ø
      let sortBy = 'created_at';
      let sortOrder: 'asc' | 'desc' = 'desc';
      
      switch (sortOption) {
        case 'oldest':
          sortBy = 'created_at';
          sortOrder = 'asc';
          break;
        case 'price_low':
          sortBy = 'price';
          sortOrder = 'asc';
          break;
        case 'price_high':
          sortBy = 'price';
          sortOrder = 'desc';
          break;
        default: // newest
          sortBy = 'created_at';
          sortOrder = 'desc';
      }
      
      console.log('Sort options:', { sortBy, sortOrder });
      console.log('Calling getBooks with:', { bookFilter, BOOKS_PER_PAGE, sortBy, sortOrder });
      
      // API ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Æ‡ßá‡¶•‡¶° ‡¶è‡¶∞ ‡¶¨‡¶¶‡¶≤‡ßá getBooks ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø 
      // ‡¶Ø‡¶æ‡¶§‡ßá ‡¶∏‡¶ï‡¶≤ ‡¶ï‡ßá‡¶á‡¶∏‡ßá ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶π‡¶Ø‡¶º
      const result = await getBooks(bookFilter, BOOKS_PER_PAGE, 0, sortBy, sortOrder);
      
      // ‡¶è‡¶∞‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø
      if (result.error) {
        console.error('Error from getBooks:', result.error);
        throw new Error(result.error.message || 'Error fetching books');
      }
      
      // ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø - ‡¶Ø‡¶¶‡¶ø ‡¶°‡¶æ‡¶ü‡¶æ undefined ‡¶π‡¶Ø‡¶º
      if (!result.data) {
        throw new Error('No data received from API');
      }
      
      // ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶ø
      setBooks(result.data);
      setHasMoreBooks(result.data.length === BOOKS_PER_PAGE);
      
      // ‡¶Ø‡¶¶‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶ï‡ßã‡¶® ‡¶¨‡¶á ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶á
      if (result.data.length === 0) {
        console.log('No books found matching filters');
      }
    } catch (err: any) {
      console.error('Error fetching books:', err);
      
      // ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶è‡¶∞‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶∏‡ßá‡¶ú
      if (err.message && err.message.includes('network')) {
        setError('‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
      } else if (err.status === 429) {
        setError('‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
      } else {
        setError('‡¶¨‡¶á ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
      }
      
      // ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
      setBooks([]);
      setHasMoreBooks(false);
    } finally {
      // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ
      setLoading(false);
    }
  };

  // Load more books
  const loadMoreBooks = useCallback(async () => {
    // ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶ö‡¶≤‡¶õ‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ
    if (isLoadingMore) return;
    
    // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
    setIsLoadingMore(true);
    const nextPage = page + 1;
    
    try {
      // ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
      const bookFilter: BookFilter = {
        category: filters.category,
        condition: filters.condition,
        department: filters.department,
        semester: filters.semester,
        publisher: filters.publisher,
        institute_name: filters.institute_name,
        min_price: priceRange[0],
        max_price: priceRange[1],
        search_term: searchTerm
      };
      
      // ‡¶∏‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç ‡¶Ö‡¶™‡¶∂‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
      let sortBy = 'created_at';
      let sortOrder: 'asc' | 'desc' = 'desc';
      
      switch (sortOption) {
        case 'oldest':
          sortBy = 'created_at';
          sortOrder = 'asc';
          break;
        case 'price_low':
          sortBy = 'price';
          sortOrder = 'asc';
          break;
        case 'price_high':
          sortBy = 'price';
          sortOrder = 'desc';
          break;
        default: // newest
          sortBy = 'created_at';
          sortOrder = 'desc';
      }
      
      // ‡¶™‡ßá‡¶ú‡¶ø‡¶®‡ßá‡¶∂‡¶® ‡¶Ö‡¶´‡¶∏‡ßá‡¶ü ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ
      const offset = nextPage * BOOKS_PER_PAGE;
      console.log(`Loading more books, page: ${nextPage}, offset: ${offset}, filter:`, bookFilter);
      
      // API ‡¶ï‡¶≤
      const result = await getBooks(bookFilter, BOOKS_PER_PAGE, offset, sortBy, sortOrder);
      
      // ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
      if (result.error) {
        console.error('Error loading more books:', result.error);
        throw result.error;
      }
      
      // ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ö‡ßá‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
      if (result.data && result.data.length > 0) {
        setBooks(prevBooks => {
          // ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶á ‡¶Ø‡¶æ‡¶§‡ßá ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
          const existingIds = new Set(prevBooks.map(book => book.id));
          const uniqueNewBooks = result.data.filter(book => !existingIds.has(book.id));
          
          return [...prevBooks, ...uniqueNewBooks];
        });
        
        setPage(nextPage);
        setHasMoreBooks(result.data.length === BOOKS_PER_PAGE);
        
        console.log(`Loaded ${result.data.length} more books, hasMore: ${result.data.length === BOOKS_PER_PAGE}`);
      } else {
        // ‡¶Ü‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¨‡¶á ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶ú‡¶Æ‡ßã‡¶∞ ‡¶´‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ó ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
        setHasMoreBooks(false);
        console.log('No more books to load');
        
        // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
        toast({
          title: "‡¶∏‡¶¨ ‡¶¨‡¶á ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
          description: "‡¶Ü‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶á ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§",
          variant: "default",
        });
      }
    } catch (err: any) {
      console.error('Error loading more books:', err);
      
      // ‡¶è‡¶∞‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
      toast({
        title: "‡¶¨‡¶á ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø",
        description: err.message || "‡¶Ü‡¶∞‡¶ì ‡¶¨‡¶á ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        variant: "destructive",
      });
    } finally {
      // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
      setIsLoadingMore(false);
    }
  }, [isLoadingMore, page, filters, priceRange, searchTerm, sortOption, toast]);

  // Send message to seller
  const handleContactSeller = async (book: BookEntity) => {
    if (!user) {
      toast({
        title: '‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®',
        description: '‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
        variant: 'destructive'
      });
      navigate('/login');
      return;
    }
    
    console.log('üöÄ handleContactSeller called:', {
      userId: user.id,
      bookId: book.id,
      authContextVerified: isVerified,
      verificationLoading: verificationLoading,
    });
    
    // If verification is still loading or not yet determined, do a direct check
    let currentVerificationStatus = isVerified;
    
    if (verificationLoading || (!isVerified && !verificationLoading)) {
      console.log('‚è≥ Verification status unclear, doing direct check...');
      console.log('Current state:', { isVerified, verificationLoading });
      
      try {
        // Do a direct verification check instead of waiting
        const { isVerified: directVerified, error } = await getUserVerificationStatus(user.id);
        
        if (error) {
          console.error('Error in direct verification check:', error);
          
          // Fallback: if direct check fails, assume not verified for safety
          console.log('üö® Direct check failed, assuming not verified for safety');
          currentVerificationStatus = false;
        } else {
          currentVerificationStatus = directVerified;
          console.log('‚úÖ Direct verification check result:', directVerified);
        }
        
      } catch (error) {
        console.error('Exception in direct verification check:', error);
        
        // Fallback: if direct check fails with exception, assume not verified
        console.log('üö® Direct check exception, assuming not verified for safety');
        currentVerificationStatus = false;
      }
    } else {
      console.log('‚úÖ Using cached verification status:', isVerified);
    }
    
    if (!currentVerificationStatus) {
      console.log('‚ùå User is NOT verified');
      
      toast({
        title: '‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®',
        description: '‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§',
        variant: 'destructive'
      });
      navigate('/verification');
      return;
    }
    
    console.log('‚úÖ User is verified - proceeding with message flow');
    
    // Check if user and seller are from the same institution
    if (profile && book.seller_id) {
      try {
        // Fetch seller profile
        const { data: sellerProfile, error } = await supabase
          .from('profiles')
          .select('institute_name')
          .eq('id', book.seller_id)
          .single();
          
        if (error) throw error;
        
        // If institutions don't match, redirect to not-allowed page
        if (profile.institute_name !== sellerProfile?.institute_name) {
          navigate('/not-allowed');
          return;
        }
      } catch (error) {
        console.error('Error checking institution match:', error);
        toast({
          title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
          description: "‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
          variant: "destructive"
        });
        return;
      }
    }
    
    // Open message dialog with the selected book
    setMessageBook(book);
    setIsMessageDialogOpen(true);
  };

  // Get condition label
  const getConditionLabel = (condition: string) => {
    return bookConditions.find(c => c.value === condition)?.label || condition;
  };
  
  // Handle view book details
  const handleViewBookDetails = (book: BookEntity) => {
    // Navigate to the book detail page instead of showing a dialog
    navigate(`/book/${book.id}`);
  };
  
  // Handle purchase request
  const handlePurchaseRequest = async (book: BookEntity) => {
    if (!user) {
      toast({
        title: "‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®",
        description: "‡¶¨‡¶á ‡¶ï‡ßá‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶ó‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
        variant: "destructive"
      });
      navigate('/login');
      return;
    }
    
    // Check if user and seller are from the same institution
    if (profile && book.seller_id) {
      try {
        // Fetch seller profile
        const { data: sellerProfile, error } = await supabase
          .from('profiles')
          .select('institute_name')
          .eq('id', book.seller_id)
          .single();
          
        if (error) throw error;
        
        // If institutions don't match, redirect to not allowed page
        if (profile.institute_name !== sellerProfile?.institute_name) {
          navigate('/not-allowed');
          return;
        }
      } catch (error) {
        console.error('Error checking institution match:', error);
      }
    }
    
    // Navigate to the book detail page with purchase param
    navigate(`/book/${book.id}?purchase=true`);
  };
  
  // Get category label
  const getCategoryLabel = (category: string) => {
    return bookCategories.find(c => c.value === category)?.label || category;
  };
  
  // Get department label
  const getDepartmentLabel = (department: string) => {
    return departments.find(d => d.value === department)?.label || department;
  };
  
  // Handle department click
  const handleDepartmentClick = (department: string) => {
    setFilters(prev => ({ ...prev, department }));
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };
  
  // Toggle wishlist
  const toggleWishlist = (bookId: string) => {
    if (!user) {
      toast({
        title: '‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®',
        description: '‡¶á‡¶ö‡ßç‡¶õ‡ßá‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶Ø‡¶º ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
        variant: 'destructive'
      });
      navigate('/login');
      return;
    }
    
    setWishlist(prev => {
      const newWishlist = new Set(prev);
      if (newWishlist.has(bookId)) {
        newWishlist.delete(bookId);
        toast({
          title: '‡¶∏‡¶´‡¶≤',
          description: '‡¶¨‡¶á‡¶ü‡¶ø ‡¶á‡¶ö‡ßç‡¶õ‡ßá‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
        });
      } else {
        newWishlist.add(bookId);
        toast({
          title: '‡¶∏‡¶´‡¶≤',
          description: '‡¶¨‡¶á‡¶ü‡¶ø ‡¶á‡¶ö‡ßç‡¶õ‡ßá‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶Ø‡¶º ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
        });
      }
      return newWishlist;
    });
  };
  
  // Reset all filters
  const resetAllFilters = useCallback(() => {
    // ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶ø
    setFilters({});
    setPriceRange([0, 5000]);
    setSortOption('oldest');
    setSearchTerm('');
    
    // URL ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø
    setSearchParams(new URLSearchParams());
    
    // ‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶ø
    setTimeout(() => {
      fetchBooks();
    }, 0);
    
    // ‡¶∏‡¶æ‡¶´‡¶≤‡ßç‡¶Ø‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶á
    toast({
      title: "‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      description: "‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
      variant: "default",
    });
  }, [setSearchParams, fetchBooks, toast]);
  
  // Scroll to top
  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // Generate book card skeletons for loading state
  const renderSkeletons = () => {
    return Array(8).fill(0).map((_, index) => (
      <Card key={`skeleton-${index}`} className="book-card animate-pulse">
        <div className="h-[240px] relative">
          <Skeleton className="w-full h-full" />
        </div>
        <CardContent className="p-4 flex-1 flex flex-col">
          <Skeleton className="h-5 w-3/4 mb-2" />
          <Skeleton className="h-3 w-1/2 mb-3" />
          <div className="flex justify-between mb-2">
            <Skeleton className="h-5 w-1/4" />
            <Skeleton className="h-4 w-1/4" />
          </div>
          <Skeleton className="h-3 w-2/5 mt-auto mb-2" />
          <div className="flex justify-between gap-2 mt-2">
            <Skeleton className="h-9 w-1/2" />
            <Skeleton className="h-9 w-1/2" />
          </div>
        </CardContent>
      </Card>
    ));
  };

  return (
    <div className="min-h-screen bg-[#EFF4FA]">
      <Navigation />
      
      {/* Floating back to top button */}
      {showBackToTop && (
        <button
          onClick={scrollToTop}
          className="fixed bottom-6 right-6 z-50 p-2 bg-primary text-white rounded-full shadow-lg hover:bg-primary/90 transition-all duration-300 animate-fade-in"
          aria-label="‡¶â‡¶™‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®"
        >
          <ArrowUp size={20} />
        </button>
      )}
      
      {/* Modern Hero Section with 3D elements and animation */}
      <header className="relative overflow-hidden bg-gradient-to-br from-primary/5 via-[#EFF4FA] to-accent/5">
        {/* Decorative background elements */}
        <div className="absolute top-0 left-0 w-full h-full overflow-hidden z-0">
          <div className="absolute top-20 left-10 w-40 h-40 rounded-full bg-primary/10 animate-pulse-slow"></div>
          <div className="absolute bottom-10 right-10 w-60 h-60 rounded-full bg-accent/10 animate-pulse-slow animation-delay-2000"></div>
          <div className="absolute top-40 right-1/4 w-20 h-20 rounded-full bg-secondary/10 animate-pulse-slow animation-delay-1000"></div>
          
          {/* Floating book illustrations */}
          <div className="hidden md:block absolute -right-20 top-20 transform rotate-12 opacity-20 animate-float">
            <BookOpen size={180} className="text-primary/30" />
          </div>
          <div className="hidden md:block absolute left-10 bottom-5 transform -rotate-6 opacity-10 animate-float animation-delay-2000">
            <BookOpen size={120} className="text-accent/30" />
          </div>
        </div>
        
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-16 md:pt-24 pb-8 md:pb-12 relative z-10">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
            {/* Hero content */}
            <div className="max-w-2xl mb-10 lg:mb-0">
            {/* Breadcrumb */}
              <Breadcrumb className="mb-6">
              <BreadcrumbList>
                {filters.department && (
                  <BreadcrumbItem>
                    <BreadcrumbLink className="text-foreground/70">
                      {getDepartmentLabel(filters.department)}
                    </BreadcrumbLink>
                  </BreadcrumbItem>
                )}
                {filters.category && (
                  <>
                    {filters.department && <BreadcrumbSeparator />}
                    <BreadcrumbItem>
                      <BreadcrumbLink className="text-foreground/70">
                        {getCategoryLabel(filters.category)}
                      </BreadcrumbLink>
                    </BreadcrumbItem>
                  </>
                )}
              </BreadcrumbList>
            </Breadcrumb>
            
              <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-primary to-accent mb-4">
                ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶¨‡¶á ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®
              </h1>
              
              <p className="text-lg text-foreground/70 mb-8">
                ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶¨‡¶á‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶®‡¶ø‡¶® ‡¶∏‡¶π‡¶ú‡ßá‡¶á‡•§ ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶¨‡¶á‡¶ó‡ßÅ‡¶≤‡¶ø‡•§
              </p>
              
              <div className="flex flex-col gap-4">
                <div className="flex items-center gap-3">
                  <Badge variant="outline" className="px-3 py-1.5 bg-primary/10 text-primary border-none text-xs font-normal hover:bg-primary/10 hover:text-primary">
                    {books.length}+ ‡¶¨‡¶á ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß
                  </Badge>
                  <Badge variant="outline" className="px-3 py-1.5 bg-accent/10 text-accent border-none text-xs font-normal hover:bg-accent/10 hover:text-accent">
                    ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø
                  </Badge>
                  <Badge variant="outline" className="px-3 py-1.5 bg-primary/10 text-primary border-none text-xs font-normal hover:bg-primary/10 hover:text-primary">
                    ‡¶∏‡ßá‡¶∞‡¶æ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø
                  </Badge>
                </div>
                
                <Button 
                  variant="outline" 
                  className="w-fit flex items-center gap-2 bg-white/80 backdrop-blur-sm border border-primary/20 text-sm text-gray-800 hover:bg-white/80 hover:border-primary/20 hover:text-gray-800"
                  onClick={() => setIsVideoDialogOpen(true)}
                >
                  <Play className="h-4 w-4 text-primary" />
                  ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶á ‡¶ï‡¶ø‡¶®‡¶¨‡ßá‡¶® ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶è‡¶á ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶§‡ßá
                </Button>
              </div>
            </div>

            {/* 3D-style search card - Increased height */}
            <div className="w-full lg:w-[500px] perspective-1000">
              <Card className="bg-white border border-gray-200 shadow-xl">
                <CardContent className="p-6">
                  <div className="flex flex-col gap-5">
                    {/* Search field */}
                    <div>
                      <div className="relative">
                        <Search className="absolute left-3 top-3 h-5 w-5 text-muted-foreground" />
                        <Input
                          type="search"
                          placeholder="‡¶¨‡¶á, ‡¶≤‡ßá‡¶ñ‡¶ï ‡¶¨‡¶æ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®..." 
                          className="pl-10 bg-white border-primary/10 hover:border-primary/20 focus:border-primary/30 h-12 text-base"
                          value={searchTerm}
                          onChange={(e) => setSearchTerm(e.target.value)}
                        />
                      </div>
                    </div>
                
                    {/* Filters toggle */}
                    <div>
                      <Button
                        variant="outline"
                        className="w-full justify-between bg-white border-primary/10 hover:border-primary/20 focus:border-primary/30 h-12 text-base"
                        onClick={(e) => {
                          e.stopPropagation();
                          console.log('Opening filter dialog from main button');
                          setIsFilterDialogOpen(true);
                        }}
                      >
                        <div className="flex items-center gap-2">
                          <Filter className="h-5 w-5 text-primary" />
                          ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                        </div>
                        <ChevronDown className="h-5 w-5 text-muted-foreground" />
                      </Button>
                    </div>
                    
                    {/* ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó ‡¶∏‡ßá‡¶ï‡¶∂‡¶® - Always visible */}
                    <div className="mt-4">
                      <div className="flex items-center justify-between mb-3">
                        <p className="text-sm font-medium">‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó</p>
                        <Button 
                          variant="ghost" 
                          size="sm"
                          className="text-primary hover:text-primary/80 hover:bg-primary/5 p-0 h-auto"
                          onClick={(e) => {
                            e.stopPropagation();
                            navigate('/all-departments');
                          }}
                        >
                          <span className="text-xs">‡¶Ü‡¶∞‡¶ì ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®</span>
                          <ChevronRight className="h-3 w-3 ml-1" />
                        </Button>
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {[
                          { value: '‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', shortLabel: '‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞' },
                          { value: '‡¶∏‡¶ø‡¶≠‡¶ø‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶∏‡¶ø‡¶≠‡¶ø‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', shortLabel: '‡¶∏‡¶ø‡¶≠‡¶ø‡¶≤' },
                          { value: '‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', shortLabel: '‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤' },
                          { value: '‡¶Æ‡ßá‡¶ï‡¶æ‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶Æ‡ßá‡¶ï‡¶æ‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', shortLabel: '‡¶Æ‡ßá‡¶ï‡¶æ‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤' },
                          { value: '‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶®‡¶ø‡¶ï‡ßç‡¶∏ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶®‡¶ø‡¶ï‡ßç‡¶∏ ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', shortLabel: '‡¶á‡¶≤‡ßá‡¶ï‡¶ü‡ßç‡¶∞‡¶®‡¶ø‡¶ï‡ßç‡¶∏' },
                          { value: '‡¶´‡ßÅ‡¶° ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', label: '‡¶´‡ßÅ‡¶° ‡¶ü‡ßá‡¶ï‡¶®‡ßã‡¶≤‡¶ú‡¶ø', shortLabel: '‡¶´‡ßÅ‡¶°' }
                        ].map((dept, index) => (
                          <Badge 
                            key={index}
                            variant={filters.department === dept.value ? "default" : "outline"}
                            className={`${filters.department === dept.value 
                              ? 'bg-primary text-primary-foreground font-medium shadow-sm' 
                              : 'bg-white border-gray-300 hover:border-primary/50 hover:bg-primary/8 text-gray-700 font-medium'} 
                              cursor-pointer text-xs py-2 px-3 rounded-full transition-all duration-200 shadow-sm hover:shadow-md`}
                            onClick={() => {
                              console.log('Department badge clicked:', dept.value);
                              setFilters(prev => ({ 
                                ...prev, 
                                department: prev.department === dept.value ? undefined : dept.value 
                              }));
                            }}
                          >
                            {/* Show short label on mobile, full label on larger screens */}
                            <span className="block md:hidden">{dept.shortLabel}</span>
                            <span className="hidden md:block">{dept.label}</span>
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </header>
      
      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Section Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-2xl md:text-3xl font-bold text-foreground mb-2">
                ‡¶∏‡¶ï‡¶≤ ‡¶¨‡¶á
              </h2>
              <p className="text-muted-foreground text-sm md:text-base">
                ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶¨‡¶á‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶®‡¶ø‡¶® ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡¶æ‡¶≤ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶•‡ßá‡¶ï‡ßá
              </p>
            </div>
            {!loading && !error && (
              <div className="text-right">
                <p className="text-lg font-semibold text-primary">
                  {books.length}+ ‡¶¨‡¶á ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá
                </p>
                <p className="text-xs text-muted-foreground">
                  ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π
                </p>
              </div>
            )}
          </div>
          <div className="w-full h-px bg-gradient-to-r from-primary/20 via-primary/40 to-primary/20"></div>
        </div>
        
        {/* Books Grid */}
        <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 md:gap-6">
        {loading ? (
            renderSkeletons()
        ) : error ? (
            <div className="col-span-full text-center py-12">
              <div className="bg-destructive/10 text-destructive rounded-lg p-4 max-w-lg mx-auto">
                <p className="font-medium">{error}</p>
                <Button 
                  variant="outline"
                  size="sm"
                  onClick={() => fetchBooks()}
                  className="mt-4"
                >
                  <span className="mr-2">‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®</span>
                  {isLoadingMore && <Loader2 className="h-4 w-4 animate-spin" />}
                </Button>
              </div>
            </div>
        ) : books.length === 0 ? (
            <div className="col-span-full text-center py-12">
              <div className="bg-muted rounded-lg p-8 max-w-lg mx-auto">
                <BookOpen className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">‡¶ï‡ßã‡¶® ‡¶¨‡¶á ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø</h3>
                <p className="text-muted-foreground mb-4">
                  ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡ßç‡¶∞‡¶æ‡¶á‡¶ü‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                </p>
                <Button 
                  variant="outline"
                  onClick={resetAllFilters}
                >
                  ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
              </div>
            </div>
        ) : (
          books.map(book => (
            <BookCard
              key={book.id}
              book={book}
              wishlist={wishlist}
              handleViewBookDetails={handleViewBookDetails}
              toggleWishlist={toggleWishlist}
              handleContactSeller={handleContactSeller}
              handlePurchaseRequest={handlePurchaseRequest}
              getConditionLabel={getConditionLabel}
              getCategoryLabel={getCategoryLabel}
              getDepartmentLabel={getDepartmentLabel}
              handleDepartmentClick={handleDepartmentClick}
            />
          ))
        )}
        </div>
        
        {/* Load More Button */}
        {!loading && !error && books.length > 0 && hasMoreBooks && (
          <div className="text-center mt-12">
            <Button 
              variant="outline" 
              size="lg"
              onClick={loadMoreBooks}
              disabled={isLoadingMore}
              className="px-8 py-6 rounded-full border border-primary/20 hover:border-primary/40 transition-all duration-300"
            >
              {isLoadingMore ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...
                </>
              ) : (
                '‡¶Ü‡¶∞‡¶ì ‡¶¨‡¶á ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®'
              )}
            </Button>
          </div>
        )}
      </main>
      
      {/* Add Message Dialog */}
      <MessageDialog
        open={isMessageDialogOpen}
        onOpenChange={setIsMessageDialogOpen}
        recipientId={messageBook?.seller_id || ''}
        recipientName={messageBook?.seller_name || '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶§‡¶æ'}
        bookId={messageBook?.id}
        bookTitle={messageBook?.title}
        book={messageBook}
      />
      
      {/* Filter Dialog */}
      <FilterDialog
        open={isFilterDialogOpen}
        onOpenChange={setIsFilterDialogOpen}
        filters={filters}
        setFilters={setFilters}
        priceRange={priceRange}
        setPriceRange={setPriceRange}
        sortOption={sortOption}
        setSortOption={setSortOption}
        resetAllFilters={resetAllFilters}
      />
      
      {/* Video Dialog */}
      <Dialog open={isVideoDialogOpen} onOpenChange={setIsVideoDialogOpen}>
        <DialogContent className="max-w-3xl w-full p-4 sm:p-6">
          <DialogHeader>
            <DialogTitle className="text-lg sm:text-xl font-bold text-slate-800">‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶á ‡¶ï‡¶ø‡¶®‡¶¨‡ßá‡¶® - ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ó‡¶æ‡¶á‡¶°</DialogTitle>
          </DialogHeader>
          <div className="relative pb-[56.25%] h-0 mt-4 rounded-lg overflow-hidden shadow-xl border border-slate-200">
            <iframe
              className="absolute top-0 left-0 w-full h-full"
              src="https://www.youtube.com/embed/8SywvJirSMc?si=jWWXG02DoFb1v2-b"
              title="YouTube video player"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              referrerPolicy="strict-origin-when-cross-origin"
              allowFullScreen
            />
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default BrowseBooksPage;