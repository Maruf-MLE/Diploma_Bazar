import { createClient } from '@supabase/supabase-js';
import webpush from 'web-push';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env.production' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;
const vapidPublic = process.env.VITE_VAPID_PUBLIC_KEY;
const vapidPrivate = process.env.VAPID_PRIVATE_KEY;

console.log('üîß Complete Push Notification Debug System');
console.log('==========================================');

// Helper function to test VAPID key format
function testVapidKeyFormat(publicKey) {
  try {
    // Convert from URL-safe base64 to regular base64
    const padding = '='.repeat((4 - (publicKey.length % 4)) % 4);
    const base64 = (publicKey + padding).replace(/-/g, '+').replace(/_/g, '/');
    
    // Decode and check length
    const decoded = atob(base64);
    const keyLength = decoded.length;
    
    console.log(`üîç VAPID key length: ${keyLength} bytes`);
    console.log(`üîç Expected length: 65 bytes`);
    
    if (keyLength === 65) {
      console.log('‚úÖ VAPID key format is correct');
      return true;
    } else {
      console.log('‚ùå VAPID key format is incorrect');
      return false;
    }
  } catch (error) {
    console.log('‚ùå VAPID key format test failed:', error.message);
    return false;
  }
}

// Simulate browser push subscription generation
function simulateBrowserSubscription(vapidKey) {
  try {
    console.log('üß™ Simulating browser push subscription creation...');
    
    // This is what the browser does internally
    const mockSubscription = {
      endpoint: 'https://fcm.googleapis.com/fcm/send/mock-endpoint-test-123',
      keys: {
        // Mock keys that would be generated by the browser
        auth: new ArrayBuffer(16), // 16 byte auth key
        p256dh: new ArrayBuffer(65) // 65 byte p256dh key
      }
    };
    
    // Fill with mock data
    const authArray = new Uint8Array(mockSubscription.keys.auth);
    const p256dhArray = new Uint8Array(mockSubscription.keys.p256dh);
    
    for (let i = 0; i < authArray.length; i++) {
      authArray[i] = Math.floor(Math.random() * 256);
    }
    
    for (let i = 0; i < p256dhArray.length; i++) {
      p256dhArray[i] = Math.floor(Math.random() * 256);
    }
    
    console.log('‚úÖ Mock subscription created');
    console.log('üîç Auth key length:', authArray.length);
    console.log('üîç P256dh key length:', p256dhArray.length);
    
    return {
      endpoint: mockSubscription.endpoint,
      keys: {
        auth: mockSubscription.keys.auth,
        p256dh: mockSubscription.keys.p256dh
      }
    };
  } catch (error) {
    console.log('‚ùå Mock subscription creation failed:', error.message);
    return null;
  }
}

async function debugPushNotifications() {
  console.log('\nüìã Step 1: Environment Check');
  console.log('============================');
  
  console.log('Supabase URL:', supabaseUrl ? '‚úÖ Found' : '‚ùå Missing');
  console.log('Supabase Key:', supabaseKey ? '‚úÖ Found' : '‚ùå Missing');
  console.log('VAPID Public:', vapidPublic ? '‚úÖ Found' : '‚ùå Missing');
  console.log('VAPID Private:', vapidPrivate ? '‚úÖ Found' : '‚ùå Missing');
  
  if (!supabaseUrl || !supabaseKey || !vapidPublic || !vapidPrivate) {
    console.log('‚ùå Missing required environment variables');
    return;
  }
  
  console.log('\nüìã Step 2: VAPID Key Validation');
  console.log('===============================');
  
  console.log('VAPID Public Key:', vapidPublic.substring(0, 20) + '...');
  console.log('VAPID Private Key:', vapidPrivate.substring(0, 20) + '...');
  
  const vapidValid = testVapidKeyFormat(vapidPublic);
  if (!vapidValid) {
    console.log('‚ùå VAPID keys are invalid. Generate new ones with: npm run generate-vapid');
    return;
  }
  
  console.log('\nüìã Step 3: WebPush Configuration Test');
  console.log('=====================================');
  
  try {
    webpush.setVapidDetails(
      'mailto:admin@example.com',
      vapidPublic,
      vapidPrivate
    );
    console.log('‚úÖ WebPush VAPID configuration successful');
  } catch (error) {
    console.log('‚ùå WebPush VAPID configuration failed:', error.message);
    return;
  }
  
  console.log('\nüìã Step 4: Database Connection Test');
  console.log('===================================');
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  // Test push_subscriptions table
  const { data: pushData, error: pushError } = await supabase
    .from('push_subscriptions')
    .select('id')
    .limit(1);
  
  if (pushError) {
    console.log('‚ùå push_subscriptions table access failed:', pushError.message);
    console.log('üõ†Ô∏è Run fix_push_subscriptions_rls.sql in Supabase Dashboard');
    return;
  } else {
    console.log('‚úÖ push_subscriptions table accessible');
  }
  
  // Test notifications table
  const { data: notifData, error: notifError } = await supabase
    .from('notifications')
    .select('id')
    .limit(1);
  
  if (notifError) {
    console.log('‚ùå notifications table access failed:', notifError.message);
  } else {
    console.log('‚úÖ notifications table accessible');
  }
  
  console.log('\nüìã Step 5: Mock Push Subscription Test');
  console.log('======================================');
  
  const mockSubscription = simulateBrowserSubscription(vapidPublic);
  if (!mockSubscription) {
    console.log('‚ùå Mock subscription creation failed');
    return;
  }
  
  console.log('\nüìã Step 6: Push Server Test');
  console.log('===========================');
  
  const pushServerUrl = process.env.VITE_PUSH_SERVER_URL || 'http://localhost:4000';
  console.log('Push Server URL:', pushServerUrl);
  
  try {
    const response = await fetch(pushServerUrl, { timeout: 5000 });
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Push server accessible:', data.message);
      
      // Test subscription endpoint
      try {
        const subResponse = await fetch(pushServerUrl + '/subscriptions');
        if (subResponse.ok) {
          const subData = await subResponse.json();
          console.log('‚úÖ Push server subscriptions endpoint works');
          console.log(`üìä Current subscriptions: ${subData.count}`);
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Push server subscriptions endpoint test failed');
      }
      
    } else {
      console.log('‚ö†Ô∏è Push server returned status:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Push server not accessible:', error.message);
    console.log('üí° Start local push server: npm run push-server');
  }
  
  console.log('\nüéØ Summary and Recommendations');
  console.log('==============================');
  
  console.log('\n‚úÖ What\'s Working:');
  console.log('- Environment variables are loaded');
  console.log('- VAPID keys are present and valid');
  console.log('- Database tables are accessible');
  console.log('- WebPush library configuration works');
  
  console.log('\nüîß Next Steps to Fix Push Notifications:');
  console.log('1. Run the updated fix_push_subscriptions_rls.sql in Supabase Dashboard');
  console.log('2. Ensure push server is running (npm run push-server)');
  console.log('3. Test in browser with authenticated user');
  console.log('4. Check browser console for "Subscription still has no keys" error');
  
  console.log('\nüí° Common Causes of "No Keys" Error:');
  console.log('- Browser doesn\'t support push notifications');
  console.log('- Invalid VAPID key format or encoding');
  console.log('- Service worker registration issues');
  console.log('- Network/firewall blocking push service');
  console.log('- Incognito/private browsing mode');
  
  console.log('\nüß™ Test in Different Browsers:');
  console.log('- Chrome (best support)');
  console.log('- Firefox (good support)');  
  console.log('- Edge (good support)');
  console.log('- Safari (limited support)');
}

// Run the debug
debugPushNotifications().catch(console.error);
